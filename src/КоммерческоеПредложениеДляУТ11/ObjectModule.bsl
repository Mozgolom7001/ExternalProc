//ПОДГОТОВКА РЕГИСТРАЦИИ ОБРАБОТКИ

// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник "ВнешниеОбработки"
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	"ДополнительнаяОбработка"
//										"ДополнительныйОтчет"
//										"ЗаполнениеОбъекта"
//										"Отчет"
//										"ПечатнаяФорма"
//										"СозданиеСвязанныхОбъектов"
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, "Документ.СчетЗаказ" или "Справочник.*"
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// ВерсияБСП - Строка - Минимальная версия БСП, на которую рассчитывает код
// дополнительной обработки. Номер версии БСП задается в формате «РР.ПП.ВВ.СС»
// (РР – старший номер редакции; ПП – младший номер ре-дакции; ВВ – номер версии; СС – номер сборки).
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						"ОткрытиеФормы" - открыть форму обработки
//						"ВызовКлиентскогоМетода" - вызов клиентского экспортного метода из формы обработки
//						"ВызовСерверногоМетода" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как "ПечатьMXL"
//
Функция СведенияОВнешнейОбработке() Экспорт
  
  ПараметрыРегистрации = Новый Структура;
  ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); //Варианты: "ДополнительнаяОбработка", "ДополнительныйОтчет", "ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов" 
  
  МассивНазначений = Новый Массив();
 МассивНазначений.Добавить("Документ.КоммерческоеПредложениеКлиенту");// например: "Документ._ДемоСчетНаОплатуПокупателю"
  ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
  
 ПараметрыРегистрации.Вставить("Наименование", "Коммерческое предложение");
  ПараметрыРегистрации.Вставить("Версия", "1.0"); //например: "1.0"
  ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина); //Варианты: Истина, Ложь
  ПараметрыРегистрации.Вставить("Информация", "");
  ПараметрыРегистрации.Вставить("ВерсияБСП", "3.0.3.64");// не ниже какой версии БСП подерживается обработка
  
  ТаблицаКоманд = ПолучитьТаблицуКоманд();

  ДобавитьКоманду(ТаблицаКоманд,
          НСтр("ru = 'Коммерческое предложение (ВПФ)'"),//для отображения пользователю
          "КоммПредл",    //можно использовать для подмены поставляемой печатной формы
          "ВызовСерверногоМетода",  //Использование.  Варианты: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"   
          Ложь,//Показывать оповещение. Варианты Истина, Ложь 
          "ПечатьMXL",//Модификатор 
		  ""); //Строка с идентификаторами заменяемых внутренних печатных форм. Например "Счет,Заказ"

  ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

  Возврат ПараметрыРегистрации;

КонецФункции

Функция ПолучитьТаблицуКоманд()

  Команды = Новый ТаблицаЗначений;
  Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
  Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("ЗаменяемыеКоманды", Новый ОписаниеТипов("Строка"));
  
  Возврат Команды;

КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "",ЗаменяемыеКоманды = "")

  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;
  НоваяКоманда.ЗаменяемыеКоманды = ЗаменяемыеКоманды;

КонецПроцедуры



//ФОРМИРОВАНИЕ ПЕЧАТНОЙ ФОРМЫ

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода = Неопределено)  экспорт 
	
	//ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	ПараметрыПечати = Новый Структура;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммПредл") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"КоммПредл", //тот же - что и в функции "СведенияОВнешнейОбработке"! 
		, 
		ПечатнаяФормаКоммерческоеПредложениеКлиенту(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)//исполняющая функция (в этом же модуле)
		);
	КонецЕсли;
		
КонецПроцедуры				

Функция ПечатнаяФормаКоммерческоеПредложениеКлиенту(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ДанныеДляПечати = ДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	ДанныеШапки   = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ТаблицаТовары = ДанныеДляПечати.РезультатПоТоварам.Выгрузить();
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеШапки.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеОбъекта = ДанныеОбъектаПоДаннымДляПечати(ДанныеШапки, ТаблицаТовары);
		ЗаполнитьТабличныйДокументКоммерческоеПредложениеКлиенту(ТабличныйДокумент, ДанныеОбъекта);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеШапки.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

	
КонецФункции

Функция ДанныеДляПечати(МассивОбъектов, ПараметрыПечати)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Ссылка                              КАК Ссылка,
	|	КоммерческоеПредложениеКлиенту.Дата                                КАК Дата,
	|	КоммерческоеПредложениеКлиенту.Номер                               КАК Номер,
	|	КоммерческоеПредложениеКлиенту.Менеджер                            КАК Менеджер,
	|	КоммерческоеПредложениеКлиенту.КонтактноеЛицо                      КАК КонтактноеЛицо,
	|	КоммерческоеПредложениеКлиенту.Организация                         КАК Организация,
	|	КоммерческоеПредложениеКлиенту.СрокДействия                        КАК СрокДействия,
	|	КоммерческоеПредложениеКлиенту.Валюта                              КАК Валюта,
	|	КоммерческоеПредложениеКлиенту.ЦенаВключаетНДС                     КАК ЦенаВключаетНДС,
	|	КоммерческоеПредложениеКлиенту.Налогообложение                     КАК УчитыватьНДС,
	|	КоммерческоеПредложениеКлиенту.УсловияДоставкиТекст                КАК УсловияДоставки,
	|	КоммерческоеПредложениеКлиенту.УсловияОплатыТекст                  КАК УсловияОплаты,
	|	КоммерческоеПредложениеКлиенту.ПрочаяДополнительнаяИнформацияТекст КАК ПрочиеУсловия,
	|	КоммерческоеПредложениеКлиенту.Клиент                              КАК Клиент,
	|	КоммерческоеПредложениеКлиенту.Контрагент                          КАК Контрагент,
	|	КоммерческоеПредложениеКлиенту.ВариантУказанияСрокаПоставки        КАК ВариантУказанияСрокаПоставки,
	|	КоммерческоеПредложениеКлиенту.МожетВыкупатьсяЧастично             КАК МожетВыкупатьсяЧастично
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                                              КАК НомерСтроки,
	|	Товары.Номенклатура                                             КАК Номенклатура,
	|	Товары.Характеристика                                           КАК Характеристика,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки     КАК СуммаСкидки,
	|	Товары.ПроцентРучнойСкидки + Товары.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|	&УсловияЕдиницыИзмерения                                        КАК ЕдиницаИзмерения,
	|	Товары.Количество                                               КАК Количество,
	|	Товары.Цена                                                     КАК Цена,
	|	Товары.СуммаСНДС                                                КАК СуммаСНДС,
	|	Товары.Сумма                                                    КАК Сумма,
	|	Товары.СуммаНДС                                                 КАК СуммаНДС,
	|	Товары.СрокПоставки                                             КАК СрокПоставки
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	
	УсловияЕдиницыИзмерения = "Товары.ЕдиницаИзмерения";
	КоммерческиеПредложенияДокументыПереопределяемый.ПолучитьТекстЗапросаПолученияЕдиницыИзмерения(УсловияЕдиницыИзмерения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияЕдиницыИзмерения", УсловияЕдиницыИзмерения);
	
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип.ПривестиЗначение());
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",        ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТоварам",      ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ДанныеОбъектаПоДаннымДляПечати(ДанныеШапки, ТаблицаТовары)

	ДанныеОбъекта = Новый Структура;
	
#Область ДанныеОрганизации

	СведенияОрганизации = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Организация, СведенияОрганизации);
	
	Если ЗначениеЗаполнено(СведенияОрганизации.ПолноеНаименование) Тогда
		ПредставлениеОрганизации = СведенияОрганизации.ПолноеНаименование;
	Иначе
		ПредставлениеОрганизации = СведенияОрганизации.Наименование;
	КонецЕсли;
	
#КонецОбласти
	
#Область КонтактнаяИнформация
	
	Если ЗначениеЗаполнено(ДанныеШапки.Менеджер) Тогда
		
		МассивСМенеджером = Новый Массив;
		МассивСМенеджером.Добавить(ДанныеШапки.Менеджер);
		
		ТребуемыеТипыКонтактнойИнформации = Новый Массив;
		ТребуемыеТипыКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		                                   МассивСМенеджером,
		                                   ТребуемыеТипыКонтактнойИнформации,,
		                                   ДанныеШапки.Дата);
		
		АдресЭлектроннойПочтыМенеджера = КоммерческиеПредложенияДокументы.ПредставлениеКонтактнойИнформацииИзТаблицы(
		                                   ТаблицаКонтактнойИнформации,
		                                   Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Иначе
		ТелефонМенеджера = "";
		АдресЭлектроннойПочтыМенеджера   = "";
	КонецЕсли;
	
#КонецОбласти

#Область Товары

	ЕстьСкидки = Ложь;
	СуммаВсего    = 0;
	СуммаВсегоНДС = 0;
	КоличествоТоваров = ТаблицаТовары.Количество();
	ДанныеОбъекта.Вставить("Товары", Новый Массив);
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если СтрокаТовары.СуммаСкидки <> 0 Тогда
			ЕстьСкидки = Истина;
		КонецЕсли;
		
		СуммаВсего        = СуммаВсего +    СтрокаТовары.Сумма;
		СуммаВсегоНДС     = СуммаВсегоНДС + СтрокаТовары.СуммаНДС;
		
		СтрокаТаблицыТовары = Новый Структура;
		
		НаименованиеТовара = КоммерческиеПредложенияДокументыКлиентСервер.ПредставлениеНоменклатурыДляПечати(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика);
		
		СтрокаТаблицыТовары.Вставить("НомерСтроки",      СтрокаТовары.НомерСтроки);
		СтрокаТаблицыТовары.Вставить("Номенклатура",     НаименованиеТовара);
		СтрокаТаблицыТовары.Вставить("Количество",       СтрокаТовары.Количество);
		СтрокаТаблицыТовары.Вставить("ЕдиницаИзмерения", СтрокаТовары.ЕдиницаИзмерения);
		СтрокаТаблицыТовары.Вставить("Цена",             Формат(СтрокаТовары.Цена,"ЧДЦ=2; ЧРД=."));
		СтрокаТаблицыТовары.Вставить("СуммаСНДС",        Формат(СтрокаТовары.СуммаСНДС,"ЧДЦ=2; ЧРД=."));
		СтрокаТаблицыТовары.Вставить("СуммаСкидки",      Формат(СтрокаТовары.СуммаСкидки,"ЧДЦ=2; ЧРД=."));
		СтрокаТаблицыТовары.Вставить("СрокПоставки",     КоммерческиеПредложенияДокументыКлиентСервер.СрокПоставкиСтрокой(ДанныеШапки.ВариантУказанияСрокаПоставки, 
		                                                                                                                  СтрокаТовары.СрокПоставки));
	
	ДанныеОбъекта.Товары.Добавить(СтрокаТаблицыТовары);
		
	КонецЦикла;

#КонецОбласти

#Область ЗаполнениеДанныхОбъекта 

	ПредставлениеСуммДокумента = КоммерческиеПредложенияДокументы.ПредставлениеСуммДокументаДляПечати(ДанныеШапки, СуммаВсего, СуммаВсегоНДС, КоличествоТоваров);
	
	ДанныеОбъекта.Вставить("Ссылка",                              ДанныеШапки.Ссылка);
	ДанныеОбъекта.Вставить("ТелефонОрганизации",                  СведенияОрганизации.Телефоны);
	ДанныеОбъекта.Вставить("АдресОрганизации",                    СведенияОрганизации.ЮридическийАдрес);
	ДанныеОбъекта.Вставить("АдресЭлектроннойПочтыОрганизации",    ?(СведенияОрганизации.Свойство("ЭлектроннаяПочта"),СведенияОрганизации.ЭлектроннаяПочта, ""));
	ДанныеОбъекта.Вставить("Клиент",                              ДанныеШапки.Клиент);
	ДанныеОбъекта.Вставить("Контрагент",                          ДанныеШапки.Контрагент);
	ДанныеОбъекта.Вставить("ПредставлениеОрганизации",            ПредставлениеОрганизации);
	ДанныеОбъекта.Вставить("ПредставлениеКлиента",                ПредставлениеКлиента(ДанныеОбъекта.Клиент, ДанныеОбъекта.Контрагент));
	ДанныеОбъекта.Вставить("КонтактноеЛицо",                      ДанныеШапки.КонтактноеЛицо);
	ДанныеОбъекта.Вставить("Менеджер",                            ДанныеШапки.Менеджер);
	ДанныеОбъекта.Вставить("АдресЭлектроннойПочтыМенеджера",      АдресЭлектроннойПочтыМенеджера);
	ДанныеОбъекта.Вставить("ТелефонМенеджера",                    ТелефонМенеджера);
	ДанныеОбъекта.Вставить("Номер",                               ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеШапки.Номер, Ложь, Истина));
	ДанныеОбъекта.Вставить("Дата",                                Формат(ДанныеШапки.Дата,"ДЛФ=D"));
	ДанныеОбъекта.Вставить("ВариантУказанияСрокаПоставки",        ДанныеШапки.ВариантУказанияСрокаПоставки);
	ДанныеОбъекта.Вставить("УсловияОплаты",                       ДанныеШапки.УсловияОплаты);
	ДанныеОбъекта.Вставить("УсловияДоставки",                     ДанныеШапки.УсловияДоставки);
	ДанныеОбъекта.Вставить("ПрочиеУсловия",                       ДанныеШапки.ПрочиеУсловия);
	ДанныеОбъекта.Вставить("КонтактнаяИнформацияПредложения",     КонтактнаяИнформацияПредложения(ДанныеОбъекта));
	ДанныеОбъекта.Вставить("ИтоговаяСтрока",                      ПредставлениеСуммДокумента.ИтоговаяСтрока);
	ДанныеОбъекта.Вставить("СуммаПрописью",                       ПредставлениеСуммДокумента.СуммаПрописью);
	ДанныеОбъекта.Вставить("ЕстьСкидки",                          ЕстьСкидки);
	ДанныеОбъекта.Вставить("ПредставлениеСрокаДействия",          КоммерческиеПредложенияДокументы.ПредставлениеСрокаДействияДляПечати(ЕстьСкидки, ДанныеШапки.СрокДействия));
	ДанныеОбъекта.Вставить("ПредставлениеЧастичногоВыкупа",       КоммерческиеПредложенияДокументы.ПредставлениеЧастичногоВыкупаДляПечати(ДанныеШапки.МожетВыкупатьсяЧастично));
	ДанныеОбъекта.Вставить("УсловияПоставкиПредставление",        КоммерческиеПредложенияДокументы.ПредставлениеУсловийПоставкиДляПечати(ДанныеОбъекта.УсловияОплаты, 
	                                                                                                                                     ДанныеОбъекта.УсловияДоставки, 
	                                                                                                                                     ДанныеОбъекта.ПрочиеУсловия));
	
#КонецОбласти
	
	Возврат ДанныеОбъекта;
	
	
КонецФункции

// Подготавливает данные формирования исходящего электронного документа по Коммерческому предложению.
//
// Параметры:
//  СсылкаНаОбъект  - ДокументСсылка - Ссылка на учетный документ, по которому необходимо создать электронный.
//                                     См. ОпределяемыйТип.КоммерческоеПредложениеКлиенту.
//  ДанныеДокумента - ДеревоЗначений - Данные, соответствующие структуре Макета КоммерческоеПредложение
//                                     Обработки ОбменСКонтрагентами.
//  Отказ           - Булево         - Если нужно отказаться от создания электронного документа, необходимо установить
//                                     значение в Истина. После этого дальнейшие действия по формированию документа
//                                     производиться не будут, поэтому нужно сформировать сообщения пользователю при
//                                     необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоКоммерческомуПредложению(Знач СсылкаНаОбъект, ДанныеДокумента, Отказ) Экспорт
	
	ТипыДанныхЭлектронныхДокументов = КоммерческиеПредложенияДокументы.ТипыДанныхЭлектронныхДокументов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.НомерСтроки         КАК НомерСтроки,
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	&УсловияЕдиницыИзмерения   КАК ЕдиницаИзмерения,
	|	Товары.Ссылка              КАК Ссылка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Характеристика КАК Характеристика
	|ИЗ
	|	Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура     КАК Номенклатура,
	|	Товары.Характеристика   КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоммерческоеПредложениеКлиентуТовары.НомерСтроки                                                                        КАК НомерСтроки,
	|	КоммерческоеПредложениеКлиентуТовары.ИдентификаторСтрокиЗапроса                                                         КАК ИдентификаторСтроки,
	|	ВсеТовары.Номенклатура                                                                                                  КАК Номенклатура,
	|	ВсеТовары.Характеристика                                                                                                КАК Характеристика,
	|	ВсеТовары.ЕдиницаИзмерения                                                                                              КАК ЕдиницаИзмерения,
	|	КоммерческоеПредложениеКлиентуТовары.Количество                                                                         КАК Количество,
	|	КоммерческоеПредложениеКлиентуТовары.Цена                                                                               КАК Цена,
	|	КоммерческоеПредложениеКлиентуТовары.СтавкаНДС                                                                          КАК СтавкаНДС,
	|	КоммерческоеПредложениеКлиентуТовары.СуммаНДС                                                                           КАК СуммаНДС,
	|	КоммерческоеПредложениеКлиентуТовары.Сумма                                                                              КАК СуммаБезНДС,
	|	КоммерческоеПредложениеКлиентуТовары.СуммаСНДС                                                                          КАК СуммаСНДС,
	|	КоммерческоеПредложениеКлиентуТовары.СуммаРучнойСкидки + КоммерческоеПредложениеКлиентуТовары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА КоммерческоеПредложениеКлиентуТовары.ПроцентАвтоматическойСкидки = 0 И КоммерческоеПредложениеКлиентуТовары.ПроцентРучнойСкидки = 0 ТОГДА 0
	|		КОГДА КоммерческоеПредложениеКлиентуТовары.ПроцентАвтоматическойСкидки <> 0 И КоммерческоеПредложениеКлиентуТовары.ПроцентРучнойСкидки <> 0 ТОГДА -1
	|		КОГДА КоммерческоеПредложениеКлиентуТовары.ПроцентАвтоматическойСкидки <> 0 И КоммерческоеПредложениеКлиентуТовары.ПроцентРучнойСкидки = 0  ТОГДА КоммерческоеПредложениеКлиентуТовары.ПроцентАвтоматическойСкидки
	|		КОГДА КоммерческоеПредложениеКлиентуТовары.ПроцентАвтоматическойСкидки = 0 И КоммерческоеПредложениеКлиентуТовары.ПроцентРучнойСкидки <> 0 ТОГДА КоммерческоеПредложениеКлиентуТовары.ПроцентРучнойСкидки
	|	КОНЕЦ                                                                                                                   КАК ПроцентСкидки,
	|	КоммерческоеПредложениеКлиентуТовары.СрокПоставки                                                                       КАК СрокПоставки,
	|	КоммерческоеПредложениеКлиентуТовары.КомментарийДляПокупателя                                                           КАК Комментарий,
	|	КоммерческоеПредложениеКлиенту.ВариантУказанияСрокаПоставки                                                             КАК ВариантУказанияСрокаПоставки
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|		ПО КоммерческоеПредложениеКлиентуТовары.Ссылка = КоммерческоеПредложениеКлиенту.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК ВсеТовары
	|		ПО КоммерческоеПредложениеКлиентуТовары.НомерСтроки = ВсеТовары.НомерСтроки
	|ГДЕ
	|	КоммерческоеПредложениеКлиентуТовары.Ссылка = &СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоммерческоеПредложениеКлиенту.ИдентификаторЗКПВСервисе                                                                           КАК ИдентификаторЗапроса,
	|	КоммерческоеПредложениеКлиенту.Статус                                                                                             КАК Статус,
	|	КоммерческоеПредложениеКлиенту.Проведен                                                                                           КАК Проведен,
	|	КоммерческоеПредложениеКлиенту.Ссылка                                                                                             КАК Ссылка,
	|	КоммерческоеПредложениеКлиенту.Организация                                                                                        КАК Организация,
	|	КоммерческоеПредложениеКлиенту.Контрагент                                                                                         КАК Контрагент,
	|	КоммерческоеПредложениеКлиенту.Менеджер                                                                                           КАК Менеджер,
	|	Пользователи.Наименование                                                                                                         КАК ПредставлениеМенеджера,
	|	КоммерческоеПредложениеКлиенту.УсловияДоставкиТекст                                                                               КАК УсловияДоставки,
	|	КоммерческоеПредложениеКлиенту.УсловияОплатыТекст                                                                                 КАК УсловияОплаты,
	|	КоммерческоеПредложениеКлиенту.ПрочаяДополнительнаяИнформацияТекст                                                                КАК УсловияПрочие,
	|	КоммерческоеПредложениеКлиенту.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКоммерческихПредложений.ПриемНаКомиссию) КАК ПриемПередачаНаКомиссию,
	|	НЕ КоммерческоеПредложениеКлиенту.МожетВыкупатьсяЧастично                                                                         КАК ВсеИлиНичего,
	|	КоммерческоеПредложениеКлиенту.ЦенаВключаетНДС                                                                                    КАК ЦенаВключаетНДС,
	|	КоммерческоеПредложениеКлиенту.Валюта.Код                                                                                         КАК ВалютаКод,
	|	КоммерческоеПредложениеКлиенту.Валюта.Наименование                                                                                КАК ВалютаНаименование,
	|	НЕ КоммерческоеПредложениеКлиенту.Налогообложение                                                                                 КАК УСН,
	|	КоммерческоеПредложениеКлиенту.СрокДействия                                                                                       КАК СрокДействия,
	|	КоммерческоеПредложениеКлиенту.ДополнительнаяИнформацияКлиентуHTML                                                                КАК ДополнительнаяИнформацияКлиентуHTML
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО КоммерческоеПредложениеКлиенту.Валюта = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = КоммерческоеПредложениеКлиенту.Менеджер)
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &СсылкаНаОбъект";
	
	УсловияЕдиницыИзмерения = "Товары.ЕдиницаИзмерения";
	КоммерческиеПредложенияДокументыПереопределяемый.ПолучитьТекстЗапросаПолученияЕдиницыИзмерения(УсловияЕдиницыИзмерения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияЕдиницыИзмерения", УсловияЕдиницыИзмерения);
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект"        , СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип.ПривестиЗначение());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = РезультатЗапроса[6].Выбрать();
	ДанныеШапки.Следующий();
	
	ПроверитьПравильностьСтатуса(Отказ, ДанныеШапки);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПолейНоменклатуры         = ЗначенияПолейНоменклатуры(РезультатЗапроса[1]);
	ЗначенияПолейХарактеристик        = ЗначенияПолейХарактеристик(РезультатЗапроса[2]);
	ЗначенияПолейЕдиницыИзмерения     = ЗначенияПолейЕдиницыИзмерения(РезультатЗапроса[3]);
	ТаблицаШтриховыхКодовНоменклатуры = ТаблицаШтриховыхКодовНоменклатуры(РезультатЗапроса[4], ТипыДанныхЭлектронныхДокументов);
	
	ЗагрузитьТаблицуТоваровВДеревоДанныхЭД(СсылкаНаОбъект, ДанныеДокумента, РезультатЗапроса[5],
	                                       ЗначенияПолейНоменклатуры, ЗначенияПолейХарактеристик,
	                                       ЗначенияПолейЕдиницыИзмерения, ТаблицаШтриховыхКодовНоменклатуры);
	
	УстановитьДанныеШапкиВДеревоДанныхЭД(СсылкаНаОбъект, ДанныеДокумента,ДанныеШапки);
	ЗагрузитьПрисоединенныеФайлыВДеревоДанныхЭД(ДанныеДокумента, СсылкаНаОбъект);
	УстановитьДанныеДополнительнаяИнформация(ДанныеДокумента, СсылкаНаОбъект, ДанныеШапки.ДополнительнаяИнформацияКлиентуHTML);
	
КонецПроцедуры


Функция ПредставлениеКлиента(Клиент, Контрагент)
	
	Возврат КоммерческиеПредложенияДокументы.ПредставлениеПартнераКонтрагента(Клиент, Контрагент);
	
КонецФункции


Функция КонтактнаяИнформацияПредложения(ДанныеОбъекта)
	
	МассивСтрок = Новый Массив;
	
	Если Не ПустаяСтрока(ДанныеОбъекта.АдресОрганизации) Тогда
		МассивСтрок.Добавить(ДанныеОбъекта.АдресОрганизации);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеОбъекта.ТелефонОрганизации) Тогда
		МассивСтрок.Добавить(ДанныеОбъекта.ТелефонОрганизации);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеОбъекта.ТелефонОрганизации) Тогда
		МассивСтрок.Добавить(ДанныеОбъекта.ТелефонОрганизации);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеОбъекта.АдресЭлектроннойПочтыМенеджера) Тогда
		МассивСтрок.Добавить(ДанныеОбъекта.АдресЭлектроннойПочтыМенеджера);
	ИначеЕсли Не ПустаяСтрока(ДанныеОбъекта.АдресЭлектроннойПочтыОрганизации) Тогда
		МассивСтрок.Добавить(ДанныеОбъекта.АдресЭлектроннойПочтыОрганизации);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции


Процедура ЗаполнитьТабличныйДокументКоммерческоеПредложениеКлиенту(ТабличныйДокумент, ДанныеОбъекта)
	
	
	Макет = ЭтотОбъект.ПолучитьМакет("ПФ_MXL_КоммерческоеПредложениеКлиенту");
	
	Если ДанныеОбъекта.ЕстьСкидки Тогда
		
		Если ДанныеОбъекта.ВариантУказанияСрокаПоставки = Перечисления.ВариантыУказанияСрокаПоставки.НеУказывается Тогда
			ПостфиксСтрок = "Скидка";
		Иначе
			ПостфиксСтрок = "СрокПоставкиСкидка";
		КонецЕсли;
		
	Иначе
		
		Если ДанныеОбъекта.ВариантУказанияСрокаПоставки = Перечисления.ВариантыУказанияСрокаПоставки.НеУказывается Тогда
			ПостфиксСтрок = "";
		Иначе
			ПостфиксСтрок = "СрокПоставки";
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьЗаголовок                = Макет.ПолучитьОбласть("Заголовок");
	ОбластьКонтактноеЛицо           = Макет.ПолучитьОбласть("КонтактноеЛицо");
	ОбластьПредлагаемОзнакомиться   = Макет.ПолучитьОбласть("ПредлагаемОзнакомиться");
	ОбластьШапкаТаблицыТовары       = Макет.ПолучитьОбласть("ШапкаТаблицыТовары"  + ПостфиксСтрок);
	ОбластьСтрокаТаблицыТовары      = Макет.ПолучитьОбласть("СтрокаТаблицыТовары" + ПостфиксСтрок);
	ОбластьПодвалТаблицыТовары      = Макет.ПолучитьОбласть("ПодвалТаблицыТовары");
	ОбластьМенеджер                 = Макет.ПолучитьОбласть("Менеджер");
	ОбластьПустаяСтрокаТонкая       = Макет.ПолучитьОбласть("ПустаяСтрокаТонкая");
	ОбластьДополнительнаяИнформация = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
	//ОбластьСрокДействия             = Макет.ПолучитьОбласть("СрокДействияЧастичныйВыкуп");

	ОбластьЗаголовок.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.КонтактноеЛицо) Тогда
		ОбластьКонтактноеЛицо.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьКонтактноеЛицо);
	КонецЕсли;
	
	ОбластьПредлагаемОзнакомиться.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьПредлагаемОзнакомиться);
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыТовары);
	
	Для Каждого СтрокаТовар Из ДанныеОбъекта.Товары Цикл
		ОбластьСтрокаТаблицыТовары.Параметры.Заполнить(СтрокаТовар);
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыТовары);
	КонецЦикла;
	
	ОбластьПодвалТаблицыТовары.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыТовары);
	
	ТабличныйДокумент.Вывести(ОбластьПустаяСтрокаТонкая);
	
	//ОбластьСрокДействия.Параметры.Заполнить(ДанныеОбъекта);
	//ТабличныйДокумент.Вывести(ОбластьСрокДействия);
	
	Если Не ПустаяСтрока(ДанныеОбъекта.УсловияПоставкиПредставление) Тогда
		
		ТабличныйДокумент.Вывести(ОбластьПустаяСтрокаТонкая);
		ОбластьДополнительнаяИнформация.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьДополнительнаяИнформация);
		
	КонецЕсли;
	
	ОбластьМенеджер.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьМенеджер);
	
КонецПроцедуры

Процедура ПроверитьПравильностьСтатуса(Отказ, ДанныеШапки)
	
	Если Не ДанныеШапки.Проведен Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Документ %1 не проведен, отправка доступна только для проведенных документов.'"),
			                    ДанныеШапки.Ссылка);
			
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДанныеШапки.Ссылка);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	НастройкиУчета = КоммерческиеПредложенияДокументы.НастройкиУчета();
	
	Если НастройкиУчета.ИспользуютсяСтатусыКоммерческихПредложенийКлиентам 
		И НастройкиУчета.СтатусыКоммерческихПредложенийКлиентамДействует.Количество() > 0 Тогда
		
		Если НастройкиУчета.СтатусыКоммерческихПредложенийКлиентамДействует.Найти(ДанныеШапки.Статус) = Неопределено Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Документ %1 находится в статусе ""%2"", отправка в котором недоступна.'"),
			                        ДанныеШапки.Ссылка,
			                        ДанныеШапки.Статус);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДанныеШапки.Ссылка, ,"Объект.Статус");
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияПолейНоменклатуры(РезультатЗапроса)
	
	МассивСтрок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	ПоляЗаполнения = Новый Структура("НоменклатураСсылка, НоменклатураНаименование");
	ЗначенияПолейНоменклатуры = КоммерческиеПредложенияДокументы.КонструкторЗначенияПолей(МассивСтрок, ПоляЗаполнения);
	КоммерческиеПредложенияДокументыПереопределяемый.ЗаполнитьДанныеНоменклатуры(МассивСтрок, ЗначенияПолейНоменклатуры);

	Возврат ЗначенияПолейНоменклатуры;
	
КонецФункции

Функция ЗначенияПолейХарактеристик(РезультатЗапроса)
	
	МассивСтрок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Характеристика");
	ПоляЗаполнения = Новый Структура("ХарактеристикаСсылка, ХарактеристикаНаименование");
	ЗначенияПолейХарактеристик = КоммерческиеПредложенияДокументы.КонструкторЗначенияПолей(МассивСтрок, ПоляЗаполнения);
	КоммерческиеПредложенияДокументыПереопределяемый.ЗаполнитьДанныеХарактеристикНоменклатуры(МассивСтрок, ЗначенияПолейХарактеристик);
	
	Возврат ЗначенияПолейХарактеристик;
	
КонецФункции

Функция ЗначенияПолейЕдиницыИзмерения(РезультатЗапроса)
	
	МассивСтрок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЕдиницаИзмерения");
	
	ПоляЗаполнения = Новый Структура("ЕдиницаИзмеренияСсылка, ЕдиницаИзмеренияКодОКЕИ, ЕдиницаИзмеренияНаименование, ЛогистическаяУпаковкаНаименование");
	ПоляЗаполнения.Вставить("Числитель", 1);
	ПоляЗаполнения.Вставить("Знаменатель", 1);
	
	ЗначенияПолейЕдиницыИзмерения = КоммерческиеПредложенияДокументы.КонструкторЗначенияПолей(МассивСтрок, ПоляЗаполнения);
	КоммерческиеПредложенияДокументыПереопределяемый.ЗаполнитьДанныеЕдиницИзмерения(МассивСтрок, ЗначенияПолейЕдиницыИзмерения);
	
	Возврат ЗначенияПолейЕдиницыИзмерения;
	
КонецФункции

Функция ТаблицаШтриховыхКодовНоменклатуры(РезультатЗапроса, ТипыДанныхЭлектронныхДокументов)
	
	ТаблицаШтриховыхКодовНоменклатуры = РезультатЗапроса.Выгрузить();
	ТаблицаШтриховыхКодовНоменклатуры.Колонки.Добавить("ШтрихКод", ТипыДанныхЭлектронныхДокументов.Строка);
	КоммерческиеПредложенияДокументыПереопределяемый.ЗаполнитьДанныеШтрихКодовНоменклатуры(ТаблицаШтриховыхКодовНоменклатуры);
	ТаблицаШтриховыхКодовНоменклатуры.Индексы.Добавить("Номенклатура, Характеристика, ЕдиницаИзмерения");
	
	Возврат ТаблицаШтриховыхКодовНоменклатуры;
	
КонецФункции
Процедура ЗагрузитьПрисоединенныеФайлыВДеревоДанныхЭД(ДанныеДокумента, СсылкаНаОбъект)
	
	ТаблицаПрисоединенныхФайлов = КоммерческиеПредложенияДокументы.ТаблицаПрисоединенныхФайловДляЭД(СсылкаНаОбъект, Ложь);
	ТаблицаПрисоединенныхФайлов.Колонки.Добавить("ДвоичныеДанные");

	Для Каждого Файл Из ТаблицаПрисоединенныхФайлов Цикл 
		
		Файл.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Файл.Ссылка);
		
	КонецЦикла;
	
	Если ТаблицаПрисоединенныхФайлов.Количество() > 0 Тогда 
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДокумента, ТаблицаПрисоединенныхФайлов, "ПрисоединенныеФайлы");
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗагрузитьТаблицуТоваровВДеревоДанныхЭД(СсылкаНаОбъект, ДанныеДокумента, РезультатЗапроса,
	                                             ЗначенияПолейНоменклатуры, ЗначенияПолейХарактеристик,
	                                             ЗначенияПолейЕдиницыИзмерения, ТаблицаШтриховыхКодовНоменклатуры)
	
	ВыборкаТовары = РезультатЗапроса.Выбрать();
	
	ТаблицаТоваров = ПустаяТаблицаТоварыДляДереваЭлектронныхДокументов();
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
		
		Если НоваяСтрока.ПроцентСкидки = -1 Тогда
		
			НоваяСтрока.ПроцентСкидки = ?(НоваяСтрока.СуммаСНДС = 0 Или НоваяСтрока.СуммаСкидки = 0,
			                              0,
			                              Окр(100 * НоваяСтрока.СуммаСкидки/(НоваяСтрока.СуммаСкидки + НоваяСтрока.СуммаСНДС), 2, РежимОкругления.Окр15как20));
		
		КонецЕсли;
		
		НоваяСтрока.ЛогистическаяУпаковка = КоммерческиеПредложенияДокументы.ЛогистическаяУпаковкаДляЭД(ВыборкаТовары.ЕдиницаИзмерения, ЗначенияПолейЕдиницыИзмерения);
		
		Если ЗначениеЗаполнено(ВыборкаТовары.СрокПоставки) Тогда
			Если ВыборкаТовары.ВариантУказанияСрокаПоставки = Перечисления.ВариантыУказанияСрокаПоставки.УказываетсяВДняхСМоментаЗаказа Тогда
				
				НоваяСтрока.СрокПоставки.Вставить("ВДнях", ВыборкаТовары.СрокПоставки);
				
			ИначеЕсли ВыборкаТовары.ВариантУказанияСрокаПоставки = Перечисления.ВариантыУказанияСрокаПоставки.УказываетсяНаОпределеннуюДату  Тогда
				
				НоваяСтрока.СрокПоставки.Вставить("НаДату", ВыборкаТовары.СрокПоставки);
				
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Товар = КоммерческиеПредложенияДокументы.ДанныеТовараДляЭД(ВыборкаТовары, ЗначенияПолейНоменклатуры,
			ЗначенияПолейХарактеристик, ЗначенияПолейЕдиницыИзмерения, ТаблицаШтриховыхКодовНоменклатуры);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Цена", СсылкаНаОбъект, "Объект.Товары.Цена",, "НомерСтроки");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДокумента, ТаблицаТоваров, "Товары");
	
КонецПроцедуры

Процедура УстановитьДанныеДополнительнаяИнформация(ДанныеДокумента, СсылкаНаОбъект, ДополнительнаяИнформацияHTML);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента, "ДополнительнаяИнформация.ФорматированныйТекст.ТекстHTML", ДополнительнаяИнформацияHTML); 
	
	ТаблицаПрисоединенныхФайлов = КоммерческиеПредложенияДокументы.ТаблицаПрисоединенныхФайловДляЭД(СсылкаНаОбъект, Истина);
	ТаблицаПрисоединенныхФайлов.Колонки.Добавить("ДвоичныеДанные");
	ТаблицаПрисоединенныхФайлов.Колонки.Добавить("ContentID");
	
	Для Каждого Файл Из ТаблицаПрисоединенныхФайлов Цикл 
		
		Файл.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Файл.Ссылка);
		Файл.ContentID      = СтрЗаменить(Прав(Файл.ИмяФайла, СтрДлина(Файл.ИмяФайла) - 1), "_", "-");
		
	КонецЦикла;
	
	Если ТаблицаПрисоединенныхФайлов.Количество() > 0 Тогда 
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДокумента, ТаблицаПрисоединенныхФайлов,
			"ДополнительнаяИнформация.ФорматированныйТекст.ПрисоединенныеФайлы");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДанныеШапкиВДеревоДанныхЭД(СсылкаНаОбъект, ДанныеДокумента, ДанныеШапки)
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента, "ИдентификаторЗапроса", ДанныеШапки.ИдентификаторЗапроса); 
	
	ДанныеОрганизации = КоммерческиеПредложенияДокументы.ДанныеУчастникаКоммерческихПредложений(ДанныеШапки.Организация);
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, ДанныеОрганизации, "Организация");
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		ДанныеШапки.Организация);
	ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДанныеДокумента,
		"Организация.ЮридическийАдрес.Представление", ПараметрыОбработкиОшибок);
	
	ДанныеКонтрагента = КоммерческиеПредложенияДокументы.ДанныеУчастникаКоммерческихПредложений(ДанныеШапки.Контрагент);
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, ДанныеКонтрагента, "Получатель");
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		ДанныеШапки.Контрагент);
	ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДанныеДокумента,
		"Получатель.ЮридическийАдрес.Представление", ПараметрыОбработкиОшибок);
	
	ДанныеКонтактногоЛица = КоммерческиеПредложенияДокументы.ДанныеМенеджераКакКонтактногоЛицаПредложений(ДанныеШапки.Менеджер, 
	                                                                                                      ДанныеШапки.ПредставлениеМенеджера);
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, ДанныеКонтактногоЛица, "КонтактноеЛицо");
	
	// УсловияИПоложения
	УсловияИПоложения = Новый Структура;
	УсловияИПоложения.Вставить("УсловияДоставки",         ДанныеШапки.УсловияДоставки);
	УсловияИПоложения.Вставить("УсловияОплаты",           ДанныеШапки.УсловияОплаты);
	УсловияИПоложения.Вставить("УсловияПрочие",           ДанныеШапки.УсловияПрочие);
	УсловияИПоложения.Вставить("ПриемПередачаНаКомиссию", ДанныеШапки.ПриемПередачаНаКомиссию);
	УсловияИПоложения.Вставить("ВсеИлиНичего",            ДанныеШапки.ВсеИлиНичего);
	УсловияИПоложения.Вставить("ЦенаВключаетНДС",         ДанныеШапки.ЦенаВключаетНДС);
	УсловияИПоложения.Вставить("ВалютаКод",               ДанныеШапки.ВалютаКод);
	УсловияИПоложения.Вставить("ВалютаНаименование",      ДанныеШапки.ВалютаНаименование);
	УсловияИПоложения.Вставить("УСН",                     ДанныеШапки.УСН);
	УсловияИПоложения.Вставить("СрокДействия",            ДанныеШапки.СрокДействия);
	
	УсловияИПоложения.Вставить("ВалютаКод", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(УсловияИПоложения.ВалютаКод));
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, УсловияИПоложения, "УсловияИПоложения");
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект,
		"Объект.СрокДействия");
	ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДанныеДокумента,
		"УсловияИПоложения.СрокДействия", ПараметрыОбработкиОшибок);
	
КонецПроцедуры

Функция ПустаяТаблицаТоварыДляДереваЭлектронныхДокументов()
	
	ТипыДанныхЭлектронныхДокументов = КоммерческиеПредложенияДокументы.ТипыДанныхЭлектронныхДокументов();
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерСтроки"  ,         ТипыДанныхЭлектронныхДокументов.Число);
	Таблица.Колонки.Добавить("ИдентификаторСтроки"  , ТипыДанныхЭлектронныхДокументов.Строка);
	Таблица.Колонки.Добавить("Количество"           , ТипыДанныхЭлектронныхДокументов.ЧислоКоличество);
	Таблица.Колонки.Добавить("ЛогистическаяУпаковка", ТипыДанныхЭлектронныхДокументов.Структура);
	Таблица.Колонки.Добавить("СрокПоставки"         , ТипыДанныхЭлектронныхДокументов.Структура);
	Таблица.Колонки.Добавить("Цена"                 , ТипыДанныхЭлектронныхДокументов.ЧислоСумма);
	Таблица.Колонки.Добавить("СтавкаНДС"            , );
	Таблица.Колонки.Добавить("СуммаСНДС"            , ТипыДанныхЭлектронныхДокументов.ЧислоСумма);
	Таблица.Колонки.Добавить("СуммаБезНДС"          , ТипыДанныхЭлектронныхДокументов.ЧислоСумма);
	Таблица.Колонки.Добавить("СуммаНДС"             , ТипыДанныхЭлектронныхДокументов.ЧислоСумма);
	Таблица.Колонки.Добавить("Товар"                , ТипыДанныхЭлектронныхДокументов.Структура);
	Таблица.Колонки.Добавить("ПроцентСкидки"        , ТипыДанныхЭлектронныхДокументов.ЧислоПроцент);
	Таблица.Колонки.Добавить("СуммаСкидки"          , ТипыДанныхЭлектронныхДокументов.ЧислоСумма);
	Таблица.Колонки.Добавить("Комментарий"          , ТипыДанныхЭлектронныхДокументов.Строка);
	
	Возврат Таблица;
	
КонецФункции
