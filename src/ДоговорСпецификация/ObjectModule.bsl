Функция СведенияОВнешнейОбработке() Экспорт
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.3.1.73");
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
    ПараметрыРегистрации.Версия = "1.0";
    // Определение объектов, к которым подключается эта обработка.
    ПараметрыРегистрации.Назначение.Добавить("Документ.ЗаказКлиента");
    
    НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
    НоваяКоманда.Представление = НСтр("ru = 'Договор / спецификация'");
    НоваяКоманда.Идентификатор = "ДоговорСпецификация";
    НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
    НоваяКоманда.Модификатор = "ПечатьMXL";
	
    Возврат ПараметрыРегистрации;
КонецФункции

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
    ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ДоговорСпецификация");
    Если ПечатнаяФорма <> Неопределено Тогда
        ПечатнаяФорма.ТабличныйДокумент = СформироватьДоговорСпецификацию(МассивОбъектов, ОбъектыПечати);
        ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Договор / спецификацияу'");
    КонецЕсли;
КонецПроцедуры

Функция СформироватьДоговорСпецификацию(МассивОбъектов, ОбъектыПечати)
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
    ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ДоговорСпецификация";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ДанныеДляПечати = Документы.ЗаказКлиента.ПолучитьДанныеДляПечатнойФормыЗаказаНаТоварыУслуги(МассивОбъектов, Неопределено);
	
	ЗаполнитьТабличныйДокументДоговорСпецификация(
		ТабличныйДокумент,
		ДанныеДляПечати,
		ОбъектыПечати,
		"ПФ_MXL_ДоговорСпецификация");
	
    Возврат ТабличныйДокумент;
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  ТабличныйДокумент	 - 	 - 
//  ДанныеДляПечати		 - 	 - 
//  ОбъектыПечати		 - 	 - 
//  ИмяМакета			 - 	 - 
//
Процедура ЗаполнитьТабличныйДокументДоговорСпецификация(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ИмяМакета)

	ШаблонОшибкиТовары	= НСтр("ru = 'В документе %1 отсутствуют товары. Печать %2 не требуется'");
	ШаблонОшибкиЭтапы	= НСтр("ru = 'В документе %1 отсутствуют этапы оплаты. Печать %2 не требуется'");
	
	ИспользоватьРучныеСкидки			= ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки	= ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	ДанныеПечати	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ЭтапыОплаты		= ДанныеДляПечати.РезультатПоЭтапамОплаты.Выгрузить();
	Товары			= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();

	ПервыйДокумент	= Истина;

	Пока ДанныеПечати.Следующий() Цикл
	
		Макет = ПолучитьМакет("ПФ_MXL_ДоговорСпецификация");
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ТаблицаТовары = Товары.НайтиСтроки(СтруктураПоиска);
		
		Если ТаблицаТовары.Количество() = 0 Тогда
		
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкиТовары,
				ДанныеПечати.Ссылка,
				ДанныеПечати.ПредставлениеВОшибке);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
			Продолжить;
		
		КонецЕсли; 
		
		ТаблицаЭтапыОплаты = ЭтапыОплаты.НайтиСтроки(СтруктураПоиска);

		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрокаКомплект = Макет.ПолучитьОбласть("СтрокаКомплекта");
		ОбластьСтрокаКомплектующее = Макет.ПолучитьОбласть("СтрокаКомплектующее");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		Договор = ДанныеПечати.Ссылка.Договор;
		
		НомерДоговора = Договор.Номер;
		ДатаДоговора = Формат(Договор.Дата, "ДФ=dd.MM.yyyy");
		
		Заголовок = "Спецификация к Договору № " + НомерДоговора + " от " + ДатаДоговора;
		
		ОбластьЗаголовок.Параметры.ЗаголовокСпецификации = Заголовок;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		НомерПП = 1;
		СуммаИтого = 0;
		СуммаИтогоСоСкидкой = 0;
		Для каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
			Если СтрокаТоваров.ЭтоНабор  Тогда
			
				ОбластьСтрокаКомплект.Параметры.НомерПоПорядку = НомерПП;
				НомерПП = НомерПП + 1;			
				
				ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТоваров.НаименованиеПолное,
					СтрокаТоваров.Характеристика,
					,
					,
					);
					
				ОбластьСтрокаКомплект.Параметры.НаименованиеКомплекта = ПредставлениеНоменклатурыДляПечати;
				
				ОбластьСтрокаКомплект.Параметры.Заполнить(СтрокаТоваров);
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаКомплект);
				СуммаИтого = СуммаИтого + СтрокаТоваров.СуммаБезСкидки;
				СуммаИтогоСоСкидкой = СуммаИтогоСоСкидкой + СтрокаТоваров.Сумма;
				
			ИначеЕсли СтрокаТоваров.ЭтоКомплектующие Тогда
							
				ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТоваров.НаименованиеПолное,
					СтрокаТоваров.Характеристика,
					,
					,
					);
					
				ОбластьСтрокаКомплектующее.Параметры.НаименованиеКомплектующего = "    * " + ПредставлениеНоменклатурыДляПечати;
				
				ОбластьСтрокаКомплектующее.Параметры.Заполнить(СтрокаТоваров);
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаКомплектующее);
				
			Иначе
				
				ОбластьСтрокаКомплект.Параметры.НомерПоПорядку = НомерПП;
				НомерПП = НомерПП + 1;			
				
				ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТоваров.НаименованиеПолное,
					СтрокаТоваров.Характеристика,
					,
					,
					);
					
				ОбластьСтрокаКомплект.Параметры.НаименованиеКомплекта = ПредставлениеНоменклатурыДляПечати;
				
				ОбластьСтрокаКомплект.Параметры.Заполнить(СтрокаТоваров);
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаКомплект);
				СуммаИтого = СуммаИтого + СтрокаТоваров.СуммаБезСкидки;
				СуммаИтогоСоСкидкой = СуммаИтогоСоСкидкой + СтрокаТоваров.Сумма;

				
			КонецЕсли; 
		
		КонецЦикла; 
		
		СтруктураПоиска = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки);
		
		Предоплаты = ЭтапыОплаты.НайтиСтроки(СтруктураПоиска);
		СуммаПредоплаты = 0;
		Если НЕ Предоплаты.Количество() = 0 Тогда
		
			Для каждого СтрокаПредоплат Из Предоплаты Цикл
			
				СуммаПредоплаты = СуммаПредоплаты + СтрокаПредоплат.СуммаПлатежа;
				
			КонецЦикла; 
		
		КонецЕсли; 
		
		
	
		ОбластьПодвал.Параметры.СуммаИтого = ФормированиеПечатныхФорм.ФорматСумм(СуммаИтого);
		ОбластьПодвал.Параметры.СуммаИтогоСоСкидкой = ФормированиеПечатныхФорм.ФорматСумм(СуммаИтогоСоСкидкой);
		
		
		ТекстИтоговойСтроки = НСтр("ru='Итого без учета сборки и доставки: %1, Предоплата %2, Остаток %3'");
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстИтоговойСтроки,
			ФормированиеПечатныхФорм.ФорматСумм(СуммаИтогоСоСкидкой, ДанныеПечати.Валюта), // Суммаитого
			ФормированиеПечатныхФорм.ФорматСумм(СуммаПредоплаты, ДанныеПечати.Валюта), //Предоплата
			ФормированиеПечатныхФорм.ФорматСумм(СуммаИтогоСоСкидкой - СуммаПредоплаты, ДанныеПечати.Валюта)); // Остаток

			ОбластьПодвал.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьТабличныйДокументДоговорСпецификация()
