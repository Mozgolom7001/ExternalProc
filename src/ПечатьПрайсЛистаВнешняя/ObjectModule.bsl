#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мТабДок;

Перем мКоличествоТиповЦен;
Перем мКоличествоГруппировок;
Перем мКоличествоКолонокВТипеЦен;

Перем мКоличествоДопПолейПосле;
Перем мКоличествоДопПолейДо;
Перем мКоличествоДопПолейВместе;

Перем мЕстьВалюта;
Перем мЕстьЕдиница;
Перем мЕстьОстаток;
Перем мНетХарактеристик;

Перем мСоответствиеГруппировок;
Перем мСоответствиеЦветовИерархии;

Перем мСоответствиеДопПолейДо;
Перем мСоответствиеДопПолейПосле;
Перем мСоответствиеДопПолейВместе;

Перем мПустаяХарактеристика;

Перем мСписокНачало;
Перем мСписокНоменклатура;
Перем мСписокТипЦен;
Перем мСписокОстаток;
Перем мСписокДопПоле;

Перем мСписокГруппаНачало;
Перем мСписокГруппаНоменклатура;
Перем мСписокГруппаТипЦен;
Перем мСписокГруппаОстаток;
Перем мСписокГруппаДопПоле;

Перем мСписокПоложенийДляПечати Экспорт;
Перем мОсобыеПоля Экспорт;
Перем мСпециальноеПоложение Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Сохраняет настройки построителя, добавляет служебные поля, получает результат,
// восстанавливает настройки.
//
// Параметры:
//  СлужебныеПоля - структура со служебными полями.
//
// Возвращаемое значение - РезультатЗапроса.
//
Функция ВыполнитьЗапрос(СлужебныеПоля)

	Настройки = ПостроительОтчета.ПолучитьНастройки();

	Для Каждого Поле Из СлужебныеПоля Цикл
		ПостроительОтчета.ДоступныеПоля[Поле.Ключ].Поле = Истина;
		ПостроительОтчета.ВыбранныеПоля.Добавить(Поле.Ключ);
	КонецЦикла;

	Сч = ПостроительОтчета.Порядок.Количество() - 1;
	Пока Сч >= 0 Цикл
		ПолеПорядка = ПостроительОтчета.Порядок[Сч];
		
		Если ПостроительОтчета.ИзмеренияСтроки.Найти(ПолеПорядка.Имя) = Неопределено И
			ПостроительОтчета.ИзмеренияКолонки.Найти(ПолеПорядка.Имя) = Неопределено И
			ПостроительОтчета.ВыбранныеПоля.Найти(ПолеПорядка.Имя) = Неопределено Тогда
			
			ПостроительОтчета.Порядок.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1; 
	КонецЦикла;

	УправлениеОтчетами.ЗадатьПараметрыОтбораПоКатегориям(ПостроительОтчета, ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);

	РезультатЗапроса = ПостроительОтчета.Результат;

	ПостроительОтчета.УстановитьНастройки(Настройки);

	Для Каждого Поле Из СлужебныеПоля Цикл
		ПостроительОтчета.ДоступныеПоля[Поле.Ключ].Поле = Ложь;
	КонецЦикла;

	Возврат РезультатЗапроса;

КонецФункции // ВыполнитьЗапрос()

// Обновляет таблицу с настройками вывода доп. полей на печать.
//
Процедура ОбновитьНастройкиПечати() Экспорт

	КоличествоСтрок = ТаблицаНастройкиПолейПечать.Количество() - 1;
	Для Тмп = 0 По КоличествоСтрок Цикл
		СтрокаНастройки = ТаблицаНастройкиПолейПечать[КоличествоСтрок - Тмп];
		Если ПостроительОтчета.ВыбранныеПоля.Найти(СтрокаНастройки.Имя) = Неопределено Тогда
			ТаблицаНастройкиПолейПечать.Удалить(СтрокаНастройки);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Поле Из ПостроительОтчета.ВыбранныеПоля Цикл
		Если ТаблицаНастройкиПолейПечать.Найти(Поле.Имя, "Имя") = Неопределено Тогда
			НоваяСтрока = ТаблицаНастройкиПолейПечать.Добавить();
			НоваяСтрока.Поле = Поле.Представление;
			НоваяСтрока.Псевдоним = Поле.Представление;
			НоваяСтрока.ВыводитьНаПечать = Истина;
			НоваяСтрока.Имя = Поле.Имя;
			НоваяСтрока.ПутьКДанным = Поле.ПутьКДанным;

			Если мОсобыеПоля.Свойство(НоваяСтрока.Имя) Тогда
				НоваяСтрока.Положение = мОсобыеПоля[НоваяСтрока.Имя];
			Иначе
				НоваяСтрока.Положение = мСписокПоложенийДляПечати[0].Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбновитьНастройкиПечати()

// В текст для построителя отчета вставляет свойства и категории.
// Скопирована из общего модуля и изменена.
Процедура ДобавитьВТекстСвойстваИКатегорииЛокально(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, 
	                                          СтруктураПараметры, ТекстИсточникиСведений="", ТекстПоляКатегорий="", 
	                                          ТекстПоляСвойств="", ТекстПоляСгруппироватьПо = "", 
	                                          ЗаменятьСвойства = "//СВОЙСТВА", ЗаменятьКатегории = "//КАТЕГОРИИ", 
	                                          ЗаменятьСоединения = "//СОЕДИНЕНИЯ", ЗаменятьСгруппироватьПо = "//СГРУППИРОВАТЬПО",
	                                          ИдентификаторыПараметровДляОтборовПоКатегориям = "", ЗаменятьИтоги = "//ИТОГИ",
	                                          ЗаменятьПредставления = "//ПРЕДСТАВЛЕНИЯ_СВОЙСТВА") Экспорт

	// Добавляемые фрагменты запроса.
	ТекстПоляКатегорийДляГруппировки ="";
	ТекстПоляСвойствДляГруппировки = "";
	ТекстИсточникиСведений ="";
	ТекстПоляКатегорий = "";
	ТекстПоляСвойств = "";
	ТекстПоляСвойствИтоги = "";
	ТекстПоляСвойствПредставления = "";
	ТекстПоляКатегорийИтоги = "";

	Если ТипЗнч(ИдентификаторыПараметровДляОтборовПоКатегориям) <> Тип("Структура") Тогда
		ИдентификаторыПараметровДляОтборовПоКатегориям = Новый Структура;
	КонецЕсли;

	Индекс = 0;

	СвойстваОбъектов = ПланыВидовХарактеристик.СвойстваОбъектов.Выбрать();

	Пока СвойстваОбъектов.Следующий() Цикл
		Если СвойстваОбъектов.ЭтоГруппа ИЛИ СвойстваОбъектов.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;

		Поля = ТаблицаПолей.НайтиСтроки(Новый Структура("Назначение", СвойстваОбъектов.НазначениеСвойства));

		Для Каждого Поле из Поля Цикл

			// Для списка всех полей.
			ТекстПоляСвойств = ТекстПоляСвойств + ",
			|	Свойство" + Индекс + ".Значение" + " КАК " + "Свойство" + Индекс + "Значение";

			ТекстПоляСвойствИтоги = ТекстПоляСвойствИтоги + ",
			|	МИНИМУМ(Свойство" + Индекс + ".Значение)";

			ТекстПоляСвойствПредставления = ТекстПоляСвойствПредставления + ",
			|	Свойство" + Индекс + ".Значение.Представление" + " КАК " + "Свойство" + Индекс + "ЗначениеПредставление";

			ТекстПоляСвойствДляГруппировки = ТекстПоляСвойствДляГруппировки + ",
			|	Свойство" + Индекс + ".Значение";

			// Источник для свойств.
			ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
			"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК Свойство" + Индекс + "
			|ПО Свойство" + Индекс + ".Объект = " + Поле.ПутьКДанным + "
			|И  Свойство" + Индекс + ".Свойство = &ПараметрСвойство" + Индекс + "}";

			СтруктураПараметры.Вставить("ПараметрСвойство" + Индекс, СвойстваОбъектов.Ссылка);

			СтруктураПредставлениеПолей.Вставить("Свойство" + Индекс + "Значение", СвойстваОбъектов.Наименование + " (св-во " + Поле.Представление + ")");

			мСоответствиеНазначений.Вставить(СвойстваОбъектов.Наименование + " (св-во " + Поле.Представление + ")", СвойстваОбъектов.Ссылка);

			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЦикла;

	Для Каждого Строка Из ТаблицаПолей Цикл
		Если Строка.НетКатегорий <> Истина Тогда
			ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
			"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК Категории" + Индекс + "
			|ПО Категории" + Индекс + ".Объект = " + Строка.ПутьКДанным + "
			|И  Категории" + Индекс + ".Категория В (&ПараметрКатегории" + Индекс + ")}";

			ТекстПоляКатегорий = ТекстПоляКатегорий + ",
			|	ЕСТЬNULL(Категории" + Индекс + ".Категория , " + Строка.ПутьКДанным +
			") КАК Категории" + Индекс + "Категория";

			ТекстПоляКатегорийДляГруппировки = ТекстПоляКатегорийДляГруппировки + ",
			|	Категории" + Индекс + ".Категория";

			СтруктураПредставлениеПолей.Вставить("Категории" + Индекс + "Категория", "Категории " + Строка.Представление);

			ИдентификаторыПараметровДляОтборовПоКатегориям.Вставить("Категории" + Индекс + "Категория", "ПараметрКатегории" + Индекс);

			мСоответствиеНазначений.Вставить("Категории " + Строка.Представление, Строка.Назначение);

			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;

	// ВЫБРАТЬ РАЗЛИЧНЫЕ съедает достаточно много ресурсов. Поэтому если 
	// не надо, то обойдемся без него.
	Если ТекстПоляКатегорийДляГруппировки <> "" Тогда
		Текст = СтрЗаменить(Текст, "//РАЗЛИЧНЫЕ", "РАЗЛИЧНЫЕ");
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, ЗаменятьСвойства, ТекстПоляСвойств);
	Текст = СтрЗаменить(Текст, ЗаменятьИтоги, ТекстПоляСвойствИтоги);
	Текст = СтрЗаменить(Текст, ЗаменятьПредставления, ТекстПоляСвойствПредставления);
	Текст = СтрЗаменить(Текст, ЗаменятьКатегории, ТекстПоляКатегорий);
	Текст = СтрЗаменить(Текст, ЗаменятьСоединения, ТекстИсточникиСведений);
	Текст = СтрЗаменить(Текст, ЗаменятьСгруппироватьПо, ТекстПоляСвойствДляГруппировки + ТекстПоляКатегорийДляГруппировки);

КонецПроцедуры // ДобавитьВТекстСвойстваИКатегорииЛокально()

// Заполняет построитель отчета.
//
Процедура ЗаполнитьПостроительОтчетаПоЦенамНоменклатуры() Экспорт

	ПостроительОтчета.Параметры.Вставить("Дата", КонецДня(ДатаПрайса));
	ПостроительОтчета.Параметры.Вставить("СпособНаценка", Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип);
	ПостроительОтчета.Параметры.Вставить("СпособДиапазон", Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон);
	ПостроительОтчета.Параметры.Вставить("ВВалютеОтчета", ВВалютеОтчета);
	ПостроительОтчета.Параметры.Вставить("ВалютаОтчета", ВалютаОтчета);
	ПостроительОтчета.Параметры.Вставить("ПустаяСтрока", "");
	ПостроительОтчета.Параметры.Вставить("ДатаЦеныНеИзменились", КонецДня(ДатаЦеныНеИзменились));

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ //РАЗЛИЧНЫЕ
	|   ЗапросПрайс.ЦеноваяГруппа.Порядок КАК ЦеноваяГруппаПорядок,
	|	НЕ ЕСТЬNULL(ЗапросПрайс.Номенклатура.ВестиУчетПоХарактеристикам, ИСТИНА) КАК НетХарактеристик,
	|	ЗапросПрайс.ТипЦен.ПорядокОкругления КАК ПорядокОкругления,
	|	ЗапросПрайс.ТипЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ЗапросПрайс.ТипЦен КАК ТипЦен,
	|	ЗапросПрайс.ТипЦен.Представление КАК ТипЦенПредставление,
	|	ЗапросПрайс.ЦеноваяГруппа,
	|	ЗапросПрайс.ЦеноваяГруппа.Представление КАК ЦеноваяГруппаПредставление,
	|	ЗапросПрайс.Номенклатура КАК Номенклатура,
	|	ЗапросПрайс.Номенклатура.Представление КАК НоменклатураПредставление,
	|	ЗапросПрайс.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗапросПрайс.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатурыПредставление,
	|	Остатки.Остаток,
	|	МестаХранения.МестоХранения КАК Стеллаж,
	|	МестаХранения.МестоХранения.Представление КАК СтеллажПредставление,
	|	Штрихкоды.Штрихкод КАК ШтрихКод,

	// Если цена равна нулю, то вместо представления единицы и валюты подставим пустую строку.
	|	ВЫБОР КОГДА ЗапросПрайс.Цена <> 0 ТОГДА
	|		ЗапросПрайс.ЕдиницаИзмерения.Представление
	|	ИНАЧЕ
	|		&ПустаяСтрока
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА ЗапросПрайс.Цена <> 0 ТОГДА
	|		ЗапросПрайс.ВалютаПрайса.Представление
	|	ИНАЧЕ
	|		&ПустаяСтрока
	|	КОНЕЦ КАК Валюта,

	// Если валюты отличаются и цена не равна нулю,
	// то необходимо пересчитать цену в нужную валюту.
	|	ВЫБОР КОГДА ЗапросПрайс.Валюта = ЗапросПрайс.ВалютаПрайса
	|			ИЛИ ЗапросПрайс.Цена = 0 ТОГДА
	|		ЗапросПрайс.Цена
	|	ИНАЧЕ
	|		ЗапросПрайс.Цена * ВЫБОР КОГДА КурсыВалютСрезПоследних.Курс = 0 ТОГДА
	|										1
	|									ИНАЧЕ
	|										КурсыВалютСрезПоследних.Курс КОНЕЦ
	|						 * ВЫБОР КОГДА КурсыВалютСрезПоследнихОтчет.Кратность = 0 ТОГДА
	|										1
	|									ИНАЧЕ
	|										КурсыВалютСрезПоследнихОтчет.Кратность КОНЕЦ
	|						 / ВЫБОР КОГДА КурсыВалютСрезПоследнихОтчет.Курс = 0 ТОГДА
	|										1
	|									ИНАЧЕ
	|										КурсыВалютСрезПоследнихОтчет.Курс КОНЕЦ
	|						 / ВЫБОР КОГДА КурсыВалютСрезПоследних.Кратность = 0 ТОГДА
	|										1
	|									ИНАЧЕ
	|										КурсыВалютСрезПоследних.Кратность КОНЕЦ
	|	КОНЕЦ КАК Цена

	// Эти "//СВОЙСТВА" заменятся на текст,
	// если установлен флажок "Использовать свойства и категории".
	|//СВОЙСТВА
	|//ПРЕДСТАВЛЕНИЯ_СВОЙСТВА
	|ИЗ

	// ЗапросПрайс
	|(ВЫБРАТЬ 
	|	ЦеныБазовые.ТипЦен КАК ТипЦен,

	|	ВЫБОР КОГДА &ВВалютеОтчета = ЛОЖЬ ТОГДА
	|		ВЫБОР КОГДА ЦеныБазовые.ТипЦен.Рассчитывается ТОГДА
	|			ЦеныБазовые.ТипЦен.ВалютаЦены
	|		ИНАЧЕ
	|			МИНИМУМ(
	|				ВЫБОР КОГДА ЦеныБазовые.ТипЦен.Рассчитывается ТОГДА
	|					ВЫБОР КОГДА ЦеныРасчетные.Валюта ЕСТЬ NULL ТОГДА
	|						ЦеныБазовые.Валюта
	|					ИНАЧЕ
	|						ВЫБОР КОГДА ЦеныБазовые.СпособРасчетаЦены = &СпособНаценка ТОГДА
	|							ЦеныРасчетные.Валюта
	|						ИНАЧЕ
	|							ЦеныБазовые.ВалютаДиапазона
	|						КОНЕЦ
	|					КОНЕЦ
	|				ИНАЧЕ
	|					ЦеныБазовые.Валюта
	|				КОНЕЦ
	|			)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		&ВалютаОтчета
	|	КОНЕЦ КАК ВалютаПрайса,

	|	ЦеныБазовые.ЦеноваяГруппа,
	|	ЦеныБазовые.Номенклатура,
	|	ЦеныБазовые.ХарактеристикаНоменклатуры,

	|	МИНИМУМ(
	|		ВЫБОР КОГДА ЦеныБазовые.ТипЦен.Рассчитывается ТОГДА
	|			ЦеныРасчетные.ЕдиницаИзмерения
	|		ИНАЧЕ
	|			ЦеныБазовые.ЕдиницаИзмерения
	|		КОНЕЦ
	|	) КАК ЕдиницаИзмерения,

	|	МИНИМУМ(
	|		ВЫБОР КОГДА ЦеныБазовые.ТипЦен.Рассчитывается ТОГДА
	|			ВЫБОР КОГДА ЦеныРасчетные.Валюта ЕСТЬ NULL ТОГДА
	|				ЦеныБазовые.Валюта
	|			ИНАЧЕ
	|				ВЫБОР КОГДА ЦеныБазовые.СпособРасчетаЦены = &СпособНаценка ТОГДА
	|					ЦеныРасчетные.Валюта
	|				ИНАЧЕ
	|					ЦеныБазовые.ВалютаДиапазона
	|				КОНЕЦ
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ЦеныБазовые.Валюта
	|		КОНЕЦ
	|	) КАК Валюта,

	|	МИНИМУМ(
	|		ВЫБОР КОГДА ЦеныБазовые.ТипЦен.Рассчитывается ТОГДА
	|			ВЫБОР КОГДА ЦеныБазовые.СпособРасчетаЦены = &СпособНаценка ТОГДА
	|				ВЫБОР КОГДА ЦеныРасчетные.Цена ЕСТЬ NULL ТОГДА
	|					0
	|				ИНАЧЕ
	|					ЦеныРасчетные.Цена * (1 + ЦеныБазовые.ПроцентСкидкиНаценки / 100)
	|				КОНЕЦ
	|			ИНАЧЕ
	|				ЦеныБазовые.ЦенаДиапазона
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ЦеныБазовые.Цена
	|		КОНЕЦ
	|	) КАК Цена
	|";

	Если ФлажокЦеныНеИзменилисьС Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	,ВЫБОР КОГДА &ВВалютеОтчета = ЛОЖЬ ТОГДА
		|		ВЫБОР КОГДА ЦеныБазовые.ТипЦен.Рассчитывается ТОГДА
		|			ЦеныБазовые.ТипЦен.ВалютаЦены
		|		ИНАЧЕ
		|			МИНИМУМ(
		|				ВЫБОР КОГДА ЦеныБазовые.ТипЦен.Рассчитывается ТОГДА
		|					ВЫБОР КОГДА ЦеныРасчетныеСтарые.Валюта ЕСТЬ NULL ТОГДА
		|						ЦеныБазовые.ВалютаСтарая
		|					ИНАЧЕ
		|						ВЫБОР КОГДА ЦеныБазовые.СпособРасчетаЦеныСтарый = &СпособНаценка ТОГДА
		|							ЦеныРасчетныеСтарые.Валюта
		|						ИНАЧЕ
		|							ЦеныБазовые.ВалютаДиапазонаСтарая
		|						КОНЕЦ
		|					КОНЕЦ
		|				ИНАЧЕ
		|					ЦеныБазовые.ВалютаСтарая
		|				КОНЕЦ
		|			)
		|		КОНЕЦ
		|	ИНАЧЕ
		|		&ВалютаОтчета
		|	КОНЕЦ КАК ВалютаПрайсаСтарая,

		|	МИНИМУМ(
		|		ВЫБОР КОГДА ЦеныБазовые.ТипЦен.Рассчитывается ТОГДА
		|			ЦеныРасчетныеСтарые.ЕдиницаИзмерения
		|		ИНАЧЕ
		|			ЦеныБазовые.ЕдиницаИзмеренияСтарая
		|		КОНЕЦ
		|	) КАК ЕдиницаИзмеренияСтарая,

		|	МИНИМУМ(
		|		ВЫБОР КОГДА ЦеныБазовые.ТипЦен.Рассчитывается ТОГДА
		|			ВЫБОР КОГДА ЦеныРасчетныеСтарые.Валюта ЕСТЬ NULL ТОГДА
		|				ЦеныБазовые.ВалютаСтарая
		|			ИНАЧЕ
		|				ВЫБОР КОГДА ЦеныБазовые.СпособРасчетаЦеныСтарый = &СпособНаценка ТОГДА
		|					ЦеныРасчетныеСтарые.Валюта
		|				ИНАЧЕ
		|					ЦеныБазовые.ВалютаДиапазонаСтарая
		|				КОНЕЦ
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЦеныБазовые.ВалютаСтарая
		|		КОНЕЦ
		|	) КАК ВалютаСтарая,

		|	МИНИМУМ(
		|		ВЫБОР КОГДА ЦеныБазовые.ТипЦен.Рассчитывается ТОГДА
		|			ВЫБОР КОГДА ЦеныБазовые.СпособРасчетаЦеныСтарый = &СпособНаценка ТОГДА
		|				ВЫБОР КОГДА ЦеныРасчетныеСтарые.Цена ЕСТЬ NULL ТОГДА
		|					0
		|				ИНАЧЕ
		|					ЦеныРасчетныеСтарые.Цена * (1 + ЦеныБазовые.ПроцентСкидкиНаценкиСтарый / 100)
		|				КОНЕЦ
		|			ИНАЧЕ
		|				ЦеныБазовые.ЦенаДиапазонаСтарая
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЦеныБазовые.ЦенаСтарая
		|		КОНЕЦ
		|	) КАК ЦенаСтарая
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ

	// ЦеныБазовые
	|(ВЫБРАТЬ
	|	СписокНоменклатуры.Номенклатура КАК Номенклатура,
	|	СписокНоменклатуры.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	СписокНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СпрТипЦен.ТипЦен КАК ТипЦен,
	|	ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,

	|	ВЫБОР КОГДА ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL ТОГДА
	|		СпрТипЦен.ПроцентСкидкиНаценки
	|	ИНАЧЕ
	|		ЕСТЬNULL(ЦеныНоменклатуры.ПроцентСкидкиНаценки, ЦеныНоменклатуры.ТипЦен.ПроцентСкидкиНаценки)
	|	КОНЕЦ КАК ПроцентСкидкиНаценки,

	|	ВЫБОР КОГДА ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL ТОГДА
	|		СпрТипЦен.СпособРасчетаЦены
	|	ИНАЧЕ
	|		ЕСТЬNULL(ЦеныНоменклатуры.СпособРасчетаЦены, ЦеныНоменклатуры.ТипЦен.СпособРасчетаЦены)
	|	КОНЕЦ КАК СпособРасчетаЦены,

	|	ЕСТЬNULL(ШкалыДиапазонов.Цена, 0) КАК ЦенаДиапазона,
	|	ЕСТЬNULL(ШкалыДиапазонов.ВерхняяГраница, 0) КАК ВерхняяГраница,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Валюта, СпрТипЦен.Валюта) КАК Валюта,
	|	ШкалыДиапазонов.Валюта КАК ВалютаДиапазона
	|";

	Если ФлажокЦеныНеИзменилисьС Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	,ЕСТЬNULL(ЦеныНоменклатурыСтарые.Цена, 0) КАК ЦенаСтарая,
		|	ЦеныНоменклатурыСтарые.ЕдиницаИзмерения КАК ЕдиницаИзмеренияСтарая,
		
		|	ВЫБОР КОГДА ЦеныНоменклатурыСтарые.Номенклатура ЕСТЬ NULL ТОГДА
		|		СпрТипЦен.ПроцентСкидкиНаценки
		|	ИНАЧЕ
		|		ЕСТЬNULL(ЦеныНоменклатурыСтарые.ПроцентСкидкиНаценки, ЦеныНоменклатурыСтарые.ТипЦен.ПроцентСкидкиНаценки)
		|	КОНЕЦ КАК ПроцентСкидкиНаценкиСтарый,
		
		|	ВЫБОР КОГДА ЦеныНоменклатурыСтарые.Номенклатура ЕСТЬ NULL ТОГДА
		|		СпрТипЦен.СпособРасчетаЦены
		|	ИНАЧЕ
		|		ЕСТЬNULL(ЦеныНоменклатурыСтарые.СпособРасчетаЦены, ЦеныНоменклатурыСтарые.ТипЦен.СпособРасчетаЦены)
		|	КОНЕЦ КАК СпособРасчетаЦеныСтарый,
		
		|	ЕСТЬNULL(ШкалыДиапазоновСтарые.Цена, 0) КАК ЦенаДиапазонаСтарая,
		|	ЕСТЬNULL(ШкалыДиапазоновСтарые.ВерхняяГраница, 0) КАК ВерхняяГраницаСтарая,
		|	ЕСТЬNULL(ЦеныНоменклатурыСтарые.Валюта, СпрТипЦен.Валюта) КАК ВалютаСтарая,
		|	ШкалыДиапазоновСтарые.Валюта КАК ВалютаДиапазонаСтарая
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		СпрХарактеристики.Владелец КАК Номенклатура,
	|		СпрХарактеристики.Ссылка КАК ХарактеристикаНоменклатуры
	|	ИЗ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|	{ГДЕ СпрХарактеристики.Владелец.* КАК Номенклатура,
	|	СпрХарактеристики.Владелец.ЦеноваяГруппа.* КАК ЦеноваяГруппа}
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		СпрНоменклатура.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	ИЗ Справочник.Номенклатура КАК СпрНоменклатура
	|	{ГДЕ СпрНоменклатура.Ссылка.* КАК Номенклатура,
	|	СпрНоменклатура.Ссылка.ЦеноваяГруппа.* КАК ЦеноваяГруппа}
	|	) КАК СписокНоменклатуры
	|	СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		СправочникЦен.Ссылка КАК ТипЦен,
	|		СправочникЦен.ВалютаЦены КАК Валюта,
	|		СправочникЦен.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		СправочникЦен.СпособРасчетаЦены КАК СпособРасчетаЦены
	|	ИЗ
	|		Справочник.ТипыЦенНоменклатуры КАК СправочникЦен
	|	{ГДЕ СправочникЦен.Ссылка.* КАК ТипЦен}
	|	) КАК СпрТипЦен

	// В прайсе не нужны цены по группам и наборам.
	// Такой фильтр сделаем с использованием внутреннего соедининия.
	|	ПО НЕ СписокНоменклатуры.Номенклатура.ЭтоГруппа
	|	 И НЕ СписокНоменклатуры.Номенклатура.Набор
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, {Номенклатура.* КАК Номенклатура,
	|	   Номенклатура.ЦеноваяГруппа.* КАК ЦеноваяГруппа, ТипЦен.* КАК ТипЦен}) КАК ЦеныНоменклатуры
	|	ПО ЦеныНоменклатуры.Номенклатура = СписокНоменклатуры.Номенклатура
	|	И ЦеныНоменклатуры.ТипЦен = СпрТипЦен.ТипЦен
	|	И ЦеныНоменклатуры.ХарактеристикаНоменклатуры = СписокНоменклатуры.ХарактеристикаНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ

	// ШкалыДиапазонов
	|	(ВЫБРАТЬ
	|		ДиапазоныЦен.ТипЦен,
	|		ДиапазоныЦен.ВерхняяГраница,
	|		ДиапазоныЦен.Цена,
	|		ДиапазоныЦен.Валюта,
	|		ДиапазоныЦен.ПЕРИОД КАК Период
	|	ИЗ
	|		РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата,
	|		   {ТипЦен.* КАК ТипЦен}) КАК ДиапазоныЦен
	|	СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен,
	|		МАКСИМУМ(ДиапазоныЦенДляНаценкиСрезПоследних.ПЕРИОД) КАК Период
	|	ИЗ
	|		РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата,
	|		   {ТипЦен.* КАК ТипЦен}) КАК ДиапазоныЦенДляНаценкиСрезПоследних
	|	СГРУППИРОВАТЬ ПО
	|		ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен
	|	) КАК МаксДиапазоныЦен
	|	ПО ДиапазоныЦен.ТипЦен = МаксДиапазоныЦен.ТипЦен
	|	И ДиапазоныЦен.Период = МаксДиапазоныЦен.Период
	|	) КАК ШкалыДиапазонов
	|	ПО ШкалыДиапазонов.ТипЦен = СпрТипЦен.ТипЦен
	|	И СпрТипЦен.ТипЦен.Рассчитывается
	|";

	Если ФлажокЦеныНеИзменилисьС Тогда
		ТекстЗапроса = ТекстЗапроса + "
		// ЦеныНоменклатурыСтарые
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦеныНеИзменились,
		|	   {Номенклатура.* КАК Номенклатура, Номенклатура.ЦеноваяГруппа.* КАК ЦеноваяГруппа,
		|	   ТипЦен.* КАК ТипЦен}) КАК ЦеныНоменклатурыСтарые
		|	ПО ЦеныНоменклатурыСтарые.Номенклатура = СписокНоменклатуры.Номенклатура
		|	И ЦеныНоменклатурыСтарые.ТипЦен = СпрТипЦен.ТипЦен
		|	И ЦеныНоменклатурыСтарые.ХарактеристикаНоменклатуры = СписокНоменклатуры.ХарактеристикаНоменклатуры
		
		// ШкалыДиапазоновСтарые
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		ДиапазоныЦен.ТипЦен,
		|		ДиапазоныЦен.ВерхняяГраница,
		|		ДиапазоныЦен.Цена,
		|		ДиапазоныЦен.Валюта,
		|		ДиапазоныЦен.ПЕРИОД КАК Период
		|	ИЗ
		|		РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&ДатаЦеныНеИзменились,
		|		   {ТипЦен.* КАК ТипЦен}) КАК ДиапазоныЦен
		|	СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен,
		|		МАКСИМУМ(ДиапазоныЦенДляНаценкиСрезПоследних.ПЕРИОД) КАК Период
		|	ИЗ
		|		РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&ДатаЦеныНеИзменились,
		|		   {ТипЦен.* КАК ТипЦен}) КАК ДиапазоныЦенДляНаценкиСрезПоследних
		|	СГРУППИРОВАТЬ ПО
		|		ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен
		|	) КАК МаксДиапазоныЦен
		|	ПО ДиапазоныЦен.ТипЦен = МаксДиапазоныЦен.ТипЦен
		|	И ДиапазоныЦен.Период = МаксДиапазоныЦен.Период
		|	) КАК ШкалыДиапазоновСтарые
		|	ПО ШкалыДиапазоновСтарые.ТипЦен = СпрТипЦен.ТипЦен
		|	И СпрТипЦен.ТипЦен.Рассчитывается
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|) КАК ЦеныБазовые
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, {Номенклатура.* КАК Номенклатура,
	|   Номенклатура.ЦеноваяГруппа.* КАК ЦеноваяГруппа}) КАК ЦеныРасчетные
	|ПО ЦеныБазовые.Номенклатура = ЦеныРасчетные.Номенклатура
	|И ЦеныБазовые.ХарактеристикаНоменклатуры = ЦеныРасчетные.ХарактеристикаНоменклатуры
	|И ЦеныБазовые.ТипЦен.БазовыйТипЦен = ЦеныРасчетные.ТипЦен
	|";

	Если ФлажокЦеныНеИзменилисьС Тогда
		ТекстЗапроса = ТекстЗапроса + "
		// ЦеныРасчетныеСтарые.
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦеныНеИзменились, {Номенклатура.* КАК Номенклатура,
		|   Номенклатура.ЦеноваяГруппа.* КАК ЦеноваяГруппа}) КАК ЦеныРасчетныеСтарые
		|ПО ЦеныБазовые.Номенклатура = ЦеныРасчетныеСтарые.Номенклатура
		|И ЦеныБазовые.ХарактеристикаНоменклатуры = ЦеныРасчетныеСтарые.ХарактеристикаНоменклатуры
		|И ЦеныБазовые.ТипЦен.БазовыйТипЦен = ЦеныРасчетныеСтарые.ТипЦен
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	НЕ ЦеныБазовые.ТипЦен.Рассчитывается
	|	ИЛИ ЦеныБазовые.СпособРасчетаЦены <> &СпособДиапазон
	|	ИЛИ (ЦеныБазовые.СпособРасчетаЦены = &СпособДиапазон И ЦеныРасчетные.Цена МЕЖДУ 0.000001 И ЦеныБазовые.ВерхняяГраница-0.000001)
	|";

	Если ФлажокЦеныНеИзменилисьС Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ИЛИ ЦеныБазовые.СпособРасчетаЦеныСтарый <> &СпособДиапазон
		|	ИЛИ (ЦеныБазовые.СпособРасчетаЦеныСтарый = &СпособДиапазон И ЦеныРасчетныеСтарые.Цена МЕЖДУ 0.000001 И ЦеныБазовые.ВерхняяГраницаСтарая-0.000001)
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|СГРУППИРОВАТЬ ПО
	|	ЦеныБазовые.ТипЦен,
	|	ЦеныБазовые.ЦеноваяГруппа,
	|	ЦеныБазовые.Номенклатура,
	|	ЦеныБазовые.ХарактеристикаНоменклатуры
	|) КАК ЗапросПрайс
	|";

	// Если нужны товары, которых нет на остатках -
	// используем ЛЕВОЕ СОЕДИНЕНИЕ,
	// иначе - ВНУТРЕНЕЕ СОЕДИНЕНИЕ
	Если Не БезОтсутствующихВКомпании Тогда
		ТекстЗапроса = ТекстЗапроса +"{ЛЕВОЕ "
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса +"
	|СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|	НесвернутыеОстатки.Номенклатура КАК НоменклатураОст,
	|	НесвернутыеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыОст,
	|	Сумма(НесвернутыеОстатки.Остаток) КАК Остаток
	| ИЗ
	|	(ВЫБРАТЬ
	|		Ост.Номенклатура.Ссылка КАК Номенклатура,
	|		Ост.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Ост.КоличествоОстаток КАК Остаток
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, {Склад.* КАК Склад,
	|		   Склад.ВидСклада.* КАК ВидСклада, Номенклатура.* КАК Номенклатура,
	|		   Номенклатура.ЦеноваяГруппа.* КАК ЦеноваяГруппа}) КАК Ост
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		НТТ.Номенклатура.Ссылка КАК Номенклатура,
	|		НТТ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		НТТ.КоличествоОстаток КАК Остаток
	|	ИЗ
	|		РегистрНакопления.ТоварыВНТТ.Остатки(&Дата, {Склад.* КАК Склад,
	|		   Склад.ВидСклада.* КАК ВидСклада, Номенклатура.* КАК Номенклатура,
	|		   Номенклатура.ЦеноваяГруппа.* КАК ЦеноваяГруппа}) КАК НТТ
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Розница.Номенклатура.Ссылка КАК Номенклатура,
	|		Розница.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Розница.КоличествоОстаток КАК Остаток
	|	ИЗ
	|		РегистрНакопления.ТоварыВРознице.Остатки(&Дата, {Склад.* КАК Склад,
	|		   Склад.ВидСклада.* КАК ВидСклада, Номенклатура.* КАК Номенклатура,
	|		   Номенклатура.ЦеноваяГруппа.* КАК ЦеноваяГруппа}) КАК Розница
	|	) КАК НесвернутыеОстатки
	| СГРУППИРОВАТЬ ПО
	|	НесвернутыеОстатки.Номенклатура,
	|	НесвернутыеОстатки.ХарактеристикаНоменклатуры
	|) КАК Остатки
	| ПО
	|	ЗапросПрайс.Номенклатура = Остатки.НоменклатураОст
	|	И ЗапросПрайс.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатурыОст
	|";

	Если Не БезОтсутствующихВКомпании Тогда
		ТекстЗапроса = ТекстЗапроса +"}"
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса +"
	|СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
	|ПО ЗапросПрайс.Валюта = КурсыВалютСрезПоследних.Валюта
	|";

	// Фильтр по нулевым ценам сделаем с использованием внутреннего соединения.
	Если БезПустыхЦен Тогда
		ТекстЗапроса = ТекстЗапроса + "   И ЗапросПрайс.Цена <> 0";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса +"
	|СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследнихОтчет
	|ПО ЗапросПрайс.ВалютаПрайса = КурсыВалютСрезПоследнихОтчет.Валюта
	|";

	Если ФлажокЦеныНеИзменилисьС Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаЦеныНеИзменились) КАК КурсыВалютСрезПоследнихСтарые
		|ПО ЗапросПрайс.ВалютаСтарая = КурсыВалютСрезПоследнихСтарые.Валюта
		|СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаЦеныНеИзменились) КАК КурсыВалютСрезПоследнихОтчетСтарые
		|ПО ЗапросПрайс.ВалютаПрайсаСтарая = КурсыВалютСрезПоследнихОтчетСтарые.Валюта
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|{
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|	МестаХраненияНоменклатуры.Номенклатура КАК НоменклатураХранения,
	|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
	|ИЗ
	|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
	|СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|	МестаХраненияНоменклатуры.Номенклатура КАК Номенклатура,
	|	МИНИМУМ(МестаХраненияНоменклатуры.Приоритет) КАК Приоритет
	|ИЗ
	|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|) КАК МинПриоритет
	|ПО МестаХраненияНоменклатуры.Номенклатура = МинПриоритет.Номенклатура
	|И МестаХраненияНоменклатуры.Приоритет = МинПриоритет.Приоритет
	|) КАК МестаХранения
	|ПО ЗапросПрайс.Номенклатура = МестаХранения.НоменклатураХранения
	|}
	|{
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|	Штрихкоды.ШтрихКод КАК ШтрихКод,
	|	Штрихкоды.Владелец КАК Владелец,
	|	Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыШтрихКода,
	|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|) КАК ШтрихКоды
	|ПО ЗапросПрайс.Номенклатура = Штрихкоды.Владелец
	|И ЗапросПрайс.ХарактеристикаНоменклатуры = Штрихкоды.ХарактеристикаНоменклатурыШтрихКода
	|И ЗапросПрайс.ЕдиницаИзмерения = ШтрихКоды.ЕдиницаИзмерения
	|}

	// Эти "//СОЕДИНЕНИЯ" заменятся на текст,
	// если установлен флажок "Использовать свойства и категории".
	|//СОЕДИНЕНИЯ
	|";

	Если ФлажокЦеныНеИзменилисьС Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ВЫБОР КОГДА ЗапросПрайс.Валюта = ЗапросПрайс.ВалютаПрайса
		|			ИЛИ ЗапросПрайс.Цена = 0 ТОГДА
		|		ЗапросПрайс.Цена
		|	ИНАЧЕ
		|		ЗапросПрайс.Цена * ВЫБОР КОГДА КурсыВалютСрезПоследних.Курс = 0 ТОГДА
		|										1
		|									ИНАЧЕ
		|										КурсыВалютСрезПоследних.Курс КОНЕЦ
		|						 * ВЫБОР КОГДА КурсыВалютСрезПоследних.Кратность = 0 ТОГДА
		|										1
		|									ИНАЧЕ
		|										КурсыВалютСрезПоследних.Кратность КОНЕЦ
		|						 / ВЫБОР КОГДА КурсыВалютСрезПоследнихОтчет.Курс = 0 ТОГДА
		|										1
		|									ИНАЧЕ
		|										КурсыВалютСрезПоследнихОтчет.Курс КОНЕЦ
		|						 / ВЫБОР КОГДА КурсыВалютСрезПоследнихОтчет.Кратность = 0 ТОГДА
		|										1
		|									ИНАЧЕ
		|										КурсыВалютСрезПоследнихОтчет.Кратность КОНЕЦ
		|	КОНЕЦ <> 
		|	ВЫБОР КОГДА ЗапросПрайс.ВалютаСтарая = ЗапросПрайс.ВалютаПрайсаСтарая
		|			ИЛИ ЗапросПрайс.ЦенаСтарая = 0 ТОГДА
		|		ЗапросПрайс.ЦенаСтарая
		|	ИНАЧЕ
		|		ЗапросПрайс.Цена * ВЫБОР КОГДА КурсыВалютСрезПоследнихСтарые.Курс = 0 ТОГДА
		|										1
		|									ИНАЧЕ
		|										КурсыВалютСрезПоследнихСтарые.Курс КОНЕЦ
		|						 * ВЫБОР КОГДА КурсыВалютСрезПоследнихСтарые.Кратность = 0 ТОГДА
		|										1
		|									ИНАЧЕ
		|										КурсыВалютСрезПоследнихСтарые.Кратность КОНЕЦ
		|						 / ВЫБОР КОГДА КурсыВалютСрезПоследнихОтчетСтарые.Курс = 0 ТОГДА
		|										1
		|									ИНАЧЕ
		|										КурсыВалютСрезПоследнихОтчетСтарые.Курс КОНЕЦ
		|						 / ВЫБОР КОГДА КурсыВалютСрезПоследнихОтчетСтарые.Кратность = 0 ТОГДА
		|										1
		|									ИНАЧЕ
		|										КурсыВалютСрезПоследнихОтчетСтарые.Кратность КОНЕЦ
		|	КОНЕЦ
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|{ГДЕ
	|ИСТИНА КАК СвойстваИКатегории
	|//СВОЙСТВА
	|//КАТЕГОРИИ
	|}
	|УПОРЯДОЧИТЬ ПО
	|	ТипЦен,
	|	ЦеноваяГруппаПорядок,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|ИТОГИ МАКСИМУМ(Цена), МИНИМУМ(Валюта), МИНИМУМ(ЕдиницаИзмерения), МИНИМУМ(Остаток),
	|      МИНИМУМ(Стеллаж) , МИНИМУМ(СтеллажПредставление), МИНИМУМ(ШтрихКод),
	|      МИНИМУМ(НетХарактеристик), МИНИМУМ(ЦеноваяГруппа)
	|//ИТОГИ
	|ПО
	|	ЗапросПрайс.ТипЦен,
	|	ЗапросПрайс.ЦеноваяГруппа,
	|	ЗапросПрайс.Номенклатура,
	|	ЗапросПрайс.ХарактеристикаНоменклатуры
	|//ОБЩИЕ_СВОЙСТВА
	|АВТОУПОРЯДОЧИВАНИЕ
	|";

	// Соответствие имен полей в запросе и их представлений в отчете.
	СтруктураПредставлениеПолей = Новый Структура(
	"ТипЦен,    Номенклатура,   ХарактеристикаНоменклатуры ,   ЕдиницаИзмерения, Остаток,  ЦеноваяГруппа,    ШтрихКод",
	"Тип цен", "Номенклатура", "Характеристика номенклатуры", "Ед. измерения", "Остаток", "Ценовая группа", "Штрихкод");

	ТекстПоляСвойств= "";
	ТекстПоляКатегорий = "";

	// Стандартный метод для использования в отчетах свойств и категорий.
	Если ИспользоватьСвойстваИКатегории Тогда
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "ХарактеристикаНоменклатуры";
		СтрокаТаблицы.Представление = "Характеристика номенклатуры";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;

		ДобавитьВТекстСвойстваИКатегорииЛокально(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, 
		ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
		,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);

		Для Каждого ОтборПоКатегориям Из ОбщийОтчет.мСтруктураДляОтбораПоКатегориям Цикл
			ПостроительОтчета.Параметры.Вставить(ОтборПоКатегориям.Значение, ОтборПоКатегориям.Ключ);
		КонецЦикла;

		УправлениеОтчетами.ДобавитьВТекстСВойстваОбщие(ТекстЗапроса, ТекстПоляСвойств, "//ОБЩИЕ_СВОЙСТВА");
	КонецЕсли;

	ПостроительОтчета.Текст = ТекстЗапроса;

	ПостроительОтчета.ЗаполнитьНастройки();

	// Создадим список полей, доступных для выбора.
	СоответствиеДоступныхПолей = Новый Соответствие;
	СоответствиеДоступныхПолей.Вставить("Валюта", 0);
	СоответствиеДоступныхПолей.Вставить("ЕдиницаИзмерения", 0);
	СоответствиеДоступныхПолей.Вставить("Остаток", 0);
	СоответствиеДоступныхПолей.Вставить("ЦеноваяГруппа", 0);
	СоответствиеДоступныхПолей.Вставить("Номенклатура", 0);
	СоответствиеДоступныхПолей.Вставить("ХарактеристикаНоменклатуры", 0);
	СоответствиеДоступныхПолей.Вставить("Стеллаж", 0);
	СоответствиеДоступныхПолей.Вставить("ШтрихКод", 0);

	// Создадим список доступных отборов.
	СоответствиеДоступныхОтборов = Новый Соответствие;
	СоответствиеДоступныхОтборов.Вставить("Номенклатура", 0);
	СоответствиеДоступныхОтборов.Вставить("ТипЦен", 0);
	СоответствиеДоступныхОтборов.Вставить("ЦеноваяГруппа", 0);

	СоответствиеДоступныхОтборов.Вставить("Склад", 0);
	СоответствиеДоступныхОтборов.Вставить("ВидСклада", 0);

	// Отбор по валюте сделаем только,
	// если установлен флажок "Не включать по которым не заданы цены".
	Если БезПустыхЦен Тогда
		СоответствиеДоступныхОтборов.Вставить("Валюта", 0);
	КонецЕсли;

	Для Каждого ДоступноеПоле Из ПостроительОтчета.ДоступныеПоля Цикл
		Если СоответствиеДоступныхПолей[ДоступноеПоле.Имя] = Неопределено
		   И Найти(ДоступноеПоле.Имя, "Свойство") = 0
		   И Найти(ДоступноеПоле.Имя, "Категория") = 0 Тогда
			ДоступноеПоле.Поле = Ложь;
		Иначе
			ДоступноеПоле.Поле = Истина;
		КонецЕсли;

		Если СоответствиеДоступныхОтборов[ДоступноеПоле.Имя] <> Неопределено
		 Или Найти(ДоступноеПоле.Имя, "Свойство") <> 0
		 Или Найти(ДоступноеПоле.Имя, "Категория") <> 0 Тогда
			ДоступноеПоле.Отбор = Истина;
		Иначе
			ДоступноеПоле.Отбор = Ложь;
		КонецЕсли;
	КонецЦикла;

	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	ПостроительОтчета.ИзмеренияСтроки.Добавить("ЦеноваяГруппа", ,ТипИзмеренияПостроителяОтчета.Иерархия);
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Номенклатура", ,ТипИзмеренияПостроителяОтчета.Иерархия);
	ПостроительОтчета.ИзмеренияСтроки.Добавить("ХарактеристикаНоменклатуры");

	ПостроительОтчета.ИзмеренияКолонки.Очистить();
	ПостроительОтчета.ИзмеренияКолонки.Добавить("ТипЦен");

	ПостроительОтчета.ВыбранныеПоля.Очистить();
	ПостроительОтчета.ВыбранныеПоля.Добавить("Валюта");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ЕдиницаИзмерения");

	ПостроительОтчета.Порядок.Очистить();
	ПостроительОтчета.Порядок.Добавить("ТипЦен");
	ПостроительОтчета.Порядок.Добавить("ЦеноваяГруппа.Порядок");
	ПостроительОтчета.Порядок.Добавить("Номенклатура");
	ПостроительОтчета.Порядок.Добавить("ХарактеристикаНоменклатуры");

	// Создадим массив отборов.
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Номенклатура");
	МассивОтбора.Добавить("ТипЦен");
	МассивОтбора.Добавить("ЦеноваяГруппа");

	Для Каждого ЭлементОтбора Из МассивОтбора Цикл
		Если ПостроительОтчета.Отбор.Найти(ЭлементОтбора) = Неопределено Тогда
			ПостроительОтчета.Отбор.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;

	Если ИспользоватьСвойстваИКатегории Тогда
		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);
	КонецЕсли;

	// Вызовем стандартную процедуру заполнения представлений.
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);

КонецПроцедуры // ЗаполнитьПостроительОтчетаПоЦенамНоменклатуры()

// Возвращает текстовое представление установленных отборов.
//
Функция ПолучитьТекстНастроекПостроителя()

	Результат = "";
	Для Каждого Отбор из ПостроительОтчета.Отбор Цикл
		Если Отбор.Использование Тогда
			Если Результат <> "" Тогда
				Результат = Результат + "
				|";
			Иначе
				Результат = НСтр("ru='Отбор:'") + "
				|";
			КонецЕсли;
			Результат = Результат + Отбор.Представление + " ";
			Если Отбор.ВидСравнения = ВидСравнения.Интервал Тогда
				Результат = Результат + НСтр("ru=' > '");
				Результат = Результат + Отбор.ЗначениеС;
				Результат = Результат + НСтр("ru=' И < '");
				Результат = Результат + Отбор.ЗначениеПо;
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
				Результат = Результат + НСтр("ru=' >= '");
				Результат = Результат + Отбор.ЗначениеС;
				Результат = Результат + НСтр("ru=' И <= '");
				Результат = Результат + Отбор.ЗначениеПо;
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
				Результат = Результат + НСтр("ru=' >= '");
				Результат = Результат + Отбор.ЗначениеС;
				Результат = Результат + НСтр("ru=' И < '");
				Результат = Результат + Отбор.ЗначениеПо;
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
				Результат = Результат + НСтр("ru=' > '");
				Результат = Результат + Отбор.ЗначениеС;
				Результат = Результат + НСтр("ru=' И <= '");
				Результат = Результат + Отбор.ЗначениеПо;
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСписке
				Или Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
				Или Отбор.ВидСравнения = ВидСравнения.НеВСписке
				Или Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
				Результат = Результат + Отбор.ВидСравнения + " (" + Отбор.Значение + ")";
			Иначе
				Результат = Результат + Отбор.ВидСравнения + " " + Отбор.Значение;
			КонецЕсли;
			Результат = Результат + ";";
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ПолучитьТекстНастроекПостроителя()

// Производит рекурсивный обход выборки,
// выводит в макет строки прайса из текущей выборки.
//
//  Параметры:
//   Выборка - текущая выборка.
//   НомерГруппировки - текущий номер группировки строк.
//
Процедура ВывестиСтрокуПрайса(Выборка, НомерГруппировки, КолонкиРезультата)

	// Обойдем в цикле переданную выборку.
	Пока Выборка.Следующий() Цикл
		Уровень = Выборка.Уровень();
		ЭтоНеИтогПоИерархии = (Выборка.ТипЗаписи() <> ТипЗаписиЗапроса.ИтогПоИерархии);
		НазваниеГруппировки = Выборка.Группировка();
		ЭтоНижнийУровень = (((мНетХарактеристик Или Выборка.НетХарактеристик)
		                   И НазваниеГруппировки = "Номенклатура" И ЭтоНеИтогПоИерархии)
		                   Или НазваниеГруппировки = "ХарактеристикаНоменклатуры");

		ЗначениеГруппировки = Выборка[НазваниеГруппировки];

		Если ЗначениеГруппировки = мПустаяХарактеристика Тогда
			ПредставлениеГруппировки = "----//----";//Пустую характеристику будем выводить так.
		Иначе
			Если КолонкиРезультата.Найти(НазваниеГруппировки + "Представление") = Неопределено Тогда
				ПредставлениеГруппировки = Выборка[НазваниеГруппировки];
			Иначе
				ПредставлениеГруппировки = Выборка[НазваниеГруппировки + "Представление"];
			КонецЕсли;
		КонецЕсли;

		// Если тип записи - это итог по иерархии,
		// то для вывода будем использовать секции, предназначенные для иерархии.
		Если ЭтоНеИтогПоИерархии Тогда
			СекцияНачало = мСписокНачало;
			СекцияНоменклатура = мСписокНоменклатура;
			СекцияТипЦен = мСписокТипЦен;
			СекцияОстаток = мСписокОстаток;
			СекцияДопПоле = мСписокДопПоле;
		Иначе
			СекцияНачало = мСписокГруппаНачало;
			СекцияНоменклатура = мСписокГруппаНоменклатура;
			СекцияТипЦен = мСписокГруппаТипЦен;
			СекцияОстаток = мСписокГруппаОстаток;
			СекцияДопПоле = мСписокГруппаДопПоле;
		КонецЕсли;

		// Если установлен флажок раскраски группировок,
		// то раскрасим их в зависимости от уровня группировки и признака разворачивания.
		Если ОтображатьИерархиюВЦвете Тогда
			Если ЭтоНижнийУровень Тогда
				ЦветФона = мСоответствиеЦветовИерархии[6];
			Иначе
				ЦветФона = мСоответствиеЦветовИерархии[Мин(Уровень + 1, 6)];
			КонецЕсли;

			СекцияНоменклатура.Область(1, 1, 1, 1).ЦветФона = ЦветФона;
			СекцияТипЦен.Область(1, 1, 1, мКоличествоКолонокВТипеЦен).ЦветФона = ЦветФона;

			Если мЕстьОстаток Тогда
				СекцияОстаток.Область(1, 1, 1, 1).ЦветФона = ЦветФона;
			КонецЕсли;

			Если мКоличествоДопПолейПосле + мКоличествоДопПолейДо > 0 Тогда
				СекцияДопПоле.Область(1, 1, 1, 1).ЦветФона = ЦветФона;
			КонецЕсли;
		КонецЕсли;

		мТабДок.Вывести(СекцияНачало, Уровень, , Истина);

		// Сформируем строку с пробелами для организации отступов вывода группировок.
		Пробелы = "";
		Для Тмп = 1 По Уровень Цикл
			Пробелы = Пробелы + "    ";
		КонецЦикла;

		СекцияНоменклатура.Параметры.Измерение = Пробелы + ПредставлениеГруппировки;

		Если ЭтоНеИтогПоИерархии Тогда
			СекцияНоменклатура.Параметры.Расшифровка = ЗначениеГруппировки;
		КонецЕсли;

		// Если выведены все группировки верхних уровней,
		// то выведем остаток, доп. поля, цены.
		Если ЭтоНижнийУровень Тогда
			Для Тмп = 1 По мКоличествоДопПолейДо Цикл
				СекцияДопПоле.Параметры.ЗначениеДопПоля = Выборка[мСоответствиеДопПолейДо[Тмп]];
				мТабДок.Присоединить(СекцияДопПоле);
			КонецЦикла;

			СтрокаДопПолейВместе = "";
			Для Тмп = 1 По мКоличествоДопПолейВместе Цикл
				Если Не ПустаяСтрока(Строка(Выборка[мСоответствиеДопПолейВместе[Тмп]])) Тогда
					Если ПустаяСтрока(СтрокаДопПолейВместе) Тогда
						СтрокаДопПолейВместе = СтрокаДопПолейВместе + " (" + Выборка[мСоответствиеДопПолейВместе[Тмп]];
					Иначе
						СтрокаДопПолейВместе = СтрокаДопПолейВместе + ", " + Выборка[мСоответствиеДопПолейВместе[Тмп]];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Если Не ПустаяСтрока(СтрокаДопПолейВместе) Тогда
				СекцияНоменклатура.Параметры.Измерение = СекцияНоменклатура.Параметры.Измерение + СтрокаДопПолейВместе + ")";
			КонецЕсли;

			мТабДок.Присоединить(СекцияНоменклатура);

			Если мЕстьОстаток Тогда
				СекцияОстаток.Параметры.Остаток = Формат(Выборка.Остаток, "ЧЦ=15; ЧДЦ=3");
				мТабДок.Присоединить(СекцияОстаток);
			КонецЕсли;

			Для Тмп = 1 По мКоличествоДопПолейПосле Цикл
				СекцияДопПоле.Параметры.ЗначениеДопПоля = Выборка[мСоответствиеДопПолейПосле[Тмп]];
				мТабДок.Присоединить(СекцияДопПоле);
			КонецЦикла;

			ВыборкаТипЦен = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ТипЦен", "Все");
			Пока ВыборкаТипЦен.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаТипЦен.Цена) Тогда
					СтрВалюта = ?(мЕстьВалюта, " " + ВыборкаТипЦен.Валюта, "");

					СекцияТипЦен.Параметры.Цена = ОбщегоНазначения.ФорматСумм(Ценообразование.ОкруглитьЦену(ВыборкаТипЦен.Цена, ВыборкаТипЦен.ПорядокОкругления, ВыборкаТипЦен.ОкруглятьВБольшуюСторону)) + СтрВалюта;
				Иначе
					СекцияТипЦен.Параметры.Цена = "";
				КонецЕсли;

				Если мЕстьЕдиница Тогда
					СекцияТипЦен.Параметры.Единица = ВыборкаТипЦен.ЕдиницаИзмерения;
				КонецЕсли;

				мТабДок.Присоединить(СекцияТипЦен);
			КонецЦикла;
		Иначе

			// Для группировок верхних уровней и иерархии выведем
			// пустые ячейки остатка, доп. полей и цен.
			Для Тмп = 1 По мКоличествоДопПолейДо Цикл
				СекцияДопПоле.Параметры.ЗначениеДопПоля = "";
				мТабДок.Присоединить(СекцияДопПоле);
			КонецЦикла;

			мТабДок.Присоединить(СекцияНоменклатура);

			Если мЕстьОстаток Тогда
				СекцияОстаток.Параметры.Остаток = "";
				мТабДок.Присоединить(СекцияОстаток);
			КонецЕсли;

			Для Тмп = 1 По мКоличествоДопПолейПосле Цикл
				СекцияДопПоле.Параметры.ЗначениеДопПоля = "";
				мТабДок.Присоединить(СекцияДопПоле);
			КонецЦикла;

			Для Тмп = 1 По мКоличествоТиповЦен Цикл
				СекцияТипЦен.Параметры.Цена = "";

				Если мЕстьЕдиница Тогда
					СекцияТипЦен.Параметры.Единица = "";
				КонецЕсли;

				мТабДок.Присоединить(СекцияТипЦен);
			КонецЦикла;

			// Если тип записи не итог по иерархии,
			// то нужно выбрать следующую группировку.
			Если ЭтоНеИтогПоИерархии Тогда
				ВывестиСтрокуПрайса(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, мСоответствиеГруппировок[НомерГруппировки + 1]), НомерГруппировки + 1, КолонкиРезультата);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ВывестиСтрокуПрайса()

// Выполняет запрос и формирует прайс-лист в соответствии с установленными настройками
//
// Параметры:
// ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура ПечатьПрайсЛиста(ДокументРезультат) Экспорт

	РезультатЗапроса = ВыполнитьЗапрос(Новый Структура("НетХарактеристик, ПорядокОкругления, ОкруглятьВБольшуюСторону, Цена"));

	мТабДок = ДокументРезультат;

	мТабДок.Очистить();

	Макет = ЭтотОбъект.ПолучитьМакет("МакетПрайса");

	// Выведем заголовок прайса.
	Секция = Макет.ПолучитьОбласть("Заголовок");
	Секция.Параметры.Организация = Организация;
	Секция.Параметры.Валюта = ?(ВВалютеОтчета, "В валюте: " + ВалютаОтчета + " (курс " + Окр(МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОтчета, ДатаПрайса).Курс, 2) + ").", "В валютах цен.");
	Секция.Параметры.Период = "Цены указаны на "+ Формат(ДатаПрайса, "ДФ = ""дд.ММ.гггг""");
	Секция.Параметры.Отбор = ?(ОтображатьСтрокуОтбора, ПолучитьТекстНастроекПостроителя(), "");
	мТабДок.Вывести(Секция);

	// Заполним флаги, показывающие наличие особых полей и группировок.
	СтрокаНастройки = ТаблицаНастройкиПолейПечать.Найти("Валюта", "Имя");
	мЕстьВалюта = ?(СтрокаНастройки <> Неопределено И СтрокаНастройки.ВыводитьНаПечать, Истина, Ложь);

	СтрокаНастройки = ТаблицаНастройкиПолейПечать.Найти("ЕдиницаИзмерения", "Имя");
	мЕстьЕдиница = ?(СтрокаНастройки <> Неопределено И СтрокаНастройки.ВыводитьНаПечать, Истина, Ложь);

	СтрокаНастройки = ТаблицаНастройкиПолейПечать.Найти("Остаток", "Имя");
	мЕстьОстаток = ?(СтрокаНастройки <> Неопределено И СтрокаНастройки.ВыводитьНаПечать, Истина, Ложь);

	мНетХарактеристик = (ПостроительОтчета.ИзмеренияСтроки.Найти("ХарактеристикаНоменклатуры") = Неопределено);

	Секция = Макет.ПолучитьОбласть("Шапка|Начало");
	мТабДок.Вывести(Секция);

	Секция = Макет.ПолучитьОбласть("Шапка|ДопПоле");

	мКоличествоДопПолейДо = 0;
	мСоответствиеДопПолейДо = Новый Соответствие;

	// Выведем доп. поля, которые нужно выводить ДО номенклатуры, в шапку.
	// Заодно посчитаем их количество и запомним соответствие имен.
	Для Каждого ДопПоле Из ТаблицаНастройкиПолейПечать Цикл
		Если ДопПоле.ВыводитьНаПечать И ДопПоле.Положение = "В отдельной колонке до номенклатуры" Тогда
			мКоличествоДопПолейДо = мКоличествоДопПолейДо + 1;
			мСоответствиеДопПолейДо.Вставить(мКоличествоДопПолейДо, ДопПоле.Имя);

			Секция.Параметры.ДопПоле = ДопПоле.Псевдоним;
			мТабДок.Присоединить(Секция);
		КонецЕсли;
	КонецЦикла;

	мКоличествоДопПолейВместе = 0;
	мСоответствиеДопПолейВместе = Новый Соответствие;

	// Посчитаем количество доп. полей, которые должны выводиться вместе с номенклатурой
	// и запомним соответствие имен.
	Для Каждого ДопПоле Из ТаблицаНастройкиПолейПечать Цикл
		Если ДопПоле.ВыводитьНаПечать И ДопПоле.Положение = "Вместе с номенклатурой" Тогда
			мКоличествоДопПолейВместе = мКоличествоДопПолейВместе + 1;
			мСоответствиеДопПолейВместе.Вставить(мКоличествоДопПолейВместе, ДопПоле.Имя);
		КонецЕсли;
	КонецЦикла;

	мКоличествоГруппировок = - 1;
	мСоответствиеГруппировок = Новый Соответствие;

	// Сформируем строку группировок.
	// Заодно посчитаем их количество и запомним соответствие имен.
	ТекстГруппировок = "";
	Для Каждого ГруппировкаСтрок Из ПостроительОтчета.ИзмеренияСтроки Цикл
		мКоличествоГруппировок = мКоличествоГруппировок + 1;
		мСоответствиеГруппировок.Вставить(мКоличествоГруппировок, ГруппировкаСтрок.Имя);

		ТекстГруппировок = ТекстГруппировок + ГруппировкаСтрок.Представление + "/ ";
	КонецЦикла;

	Секция = Макет.ПолучитьОбласть("Шапка|Номенклатура");
	Секция.Параметры.ГруппировкиСтрок = Лев(ТекстГруппировок, СтрДлина(ТекстГруппировок) - 2);
	мТабДок.Присоединить(Секция);

	// Если на странице "Поля" выбран Остаток,
	// то выведем его в шапку первым из доп. полей.
	Если мЕстьОстаток Тогда
		Секция = Макет.ПолучитьОбласть("Шапка|Остаток");
		мТабДок.Присоединить(Секция);
	КонецЕсли;

	Секция = Макет.ПолучитьОбласть("Шапка|ДопПоле");

	мКоличествоДопПолейПосле = 0;
	мСоответствиеДопПолейПосле = Новый Соответствие;

	// Выведем доп. поля, которые нужно выводить ПОСЛЕ номенклатуры, в шапку.
	// Заодно посчитаем их количество и запомним соответствие имен.
	Для Каждого ДопПоле Из ТаблицаНастройкиПолейПечать Цикл
		Если ДопПоле.ВыводитьНаПечать И ДопПоле.Положение = "В отдельной колонке после номенклатуры" Тогда
			мКоличествоДопПолейПосле = мКоличествоДопПолейПосле + 1;
			мСоответствиеДопПолейПосле.Вставить(мКоличествоДопПолейПосле, ДопПоле.Имя);

			Секция.Параметры.ДопПоле = ДопПоле.Псевдоним;
			мТабДок.Присоединить(Секция);
		КонецЕсли;
	КонецЦикла;

	// Если в доп. полях выбрана единица,
	// то будем выводить колонки типов цен с единицей,
	// иначе - будем выводить колонки без единицы.
	Если мЕстьЕдиница Тогда
		Секция = Макет.ПолучитьОбласть("Шапка|ТипЦенСЕдиницей");
	Иначе
		Секция = Макет.ПолучитьОбласть("Шапка|ТипЦен");
	КонецЕсли;

	мКоличествоТиповЦен = 0;

	// Выведем типы цен в шапку.
	// Заодно посчитаем их количество.
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ТипЦен", "Все");
	Пока Выборка.Следующий() Цикл
		мКоличествоТиповЦен = мКоличествоТиповЦен + 1;

		Секция.Параметры.ТипЦен = Выборка.ТипЦенПредставление;
		Секция.Параметры.Расшифровка = Выборка.ТипЦен;
		мТабДок.Присоединить(Секция);
	КонецЦикла;

	мКоличествоКолонокВТипеЦен = ?(мЕстьЕдиница, 2, 1);

	мСоответствиеЦветовИерархии = Новый Соответствие;

	// Запомним соответствие цветов для раскраски.
	Для Тмп = 1 По 6 Цикл
		мСоответствиеЦветовИерархии.Вставить(Тмп, Макет.ПолучитьОбласть("Цвет" + Тмп).Область(1, 1, 1, 1).ЦветФона);
	КонецЦикла;

	мПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

	мСписокНачало = Макет.ПолучитьОбласть("Список|Начало");
	мСписокНоменклатура = Макет.ПолучитьОбласть("Список|Номенклатура");
	Если мЕстьЕдиница Тогда
		мСписокТипЦен = Макет.ПолучитьОбласть("Список|ТипЦенСЕдиницей");
	Иначе
		мСписокТипЦен = Макет.ПолучитьОбласть("Список|ТипЦен");
	КонецЕсли;
	мСписокОстаток = Макет.ПолучитьОбласть("Список|Остаток");
	мСписокДопПоле = Макет.ПолучитьОбласть("Список|ДопПоле");

	мСписокГруппаНачало = Макет.ПолучитьОбласть("СписокГруппа|Начало");
	мСписокГруппаНоменклатура = Макет.ПолучитьОбласть("СписокГруппа|Номенклатура");
	Если мЕстьЕдиница Тогда
		мСписокГруппаТипЦен = Макет.ПолучитьОбласть("СписокГруппа|ТипЦенСЕдиницей");
	Иначе
		мСписокГруппаТипЦен = Макет.ПолучитьОбласть("СписокГруппа|ТипЦен");
	КонецЕсли;
	мСписокГруппаОстаток = Макет.ПолучитьОбласть("СписокГруппа|Остаток");
	мСписокГруппаДопПоле = Макет.ПолучитьОбласть("СписокГруппа|ДопПоле");

	мТабДок.НачатьАвтогруппировкуСтрок();
	ВывестиСтрокуПрайса(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, мСоответствиеГруппировок[0]), 0, РезультатЗапроса.Колонки);
	мТабДок.ЗакончитьАвтогруппировкуСтрок();

	мТабДок.ФиксацияСверху = 10;
	мТабДок.ФиксацияСлева = мКоличествоДопПолейДо + 2;

КонецПроцедуры // ПечатьПрайсЛиста()
#КонецЕсли
