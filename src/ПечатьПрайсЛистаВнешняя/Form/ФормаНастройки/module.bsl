////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВопросыПриЗакрытии;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Проверяет корректность установленных пользователем настроек.
//
// Параметры:
//  Отказ - в этот параметр возвращается значение Истина, если обнаружены ошибки.
//
Процедура ПроверитьКорректностьНастроек(Отказ)

	КоличествоИзмерений = ПостроительОтчета.ИзмеренияСтроки.Количество() - 1;
	ЕстьХарактеристика = ?(ПостроительОтчета.ИзмеренияСтроки.Найти("ХарактеристикаНоменклатуры") = Неопределено, Ложь, Истина);

	ИзмерениеНоменклатура = ПостроительОтчета.ИзмеренияСтроки.Найти("Номенклатура");

	Если ИзмерениеНоменклатура = Неопределено Тогда
		Предупреждение("Отсутствует обязательная группировка но номенклатуре!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Индекс = ПостроительОтчета.ИзмеренияСтроки.Индекс(ИзмерениеНоменклатура);

	Если ЕстьХарактеристика Тогда
		ИзмерениеХарактеристика = ПостроительОтчета.ИзмеренияСтроки.Найти("ХарактеристикаНоменклатуры");
		Индекс = ПостроительОтчета.ИзмеренияСтроки.Индекс(ИзмерениеХарактеристика);

		Если Индекс <> КоличествоИзмерений Тогда
			Предупреждение ("Группировка: ""Характеристика номенклатуры"" должна быть последней в измерениях строк.");
			ПостроительОтчета.ИзмеренияСтроки.Сдвинуть(ИзмерениеХарактеристика, КоличествоИзмерений - Индекс);
		КонецЕсли;

		Индекс = ПостроительОтчета.ИзмеренияСтроки.Индекс(ИзмерениеНоменклатура);

		Если Индекс <> КоличествоИзмерений -1 Тогда
			Предупреждение ("Группировка: ""Номенклатура"" должна быть перед группировкой ""Характеристика номенклатуры"" в измерениях строк.");
			ПостроительОтчета.ИзмеренияСтроки.Сдвинуть(ИзмерениеНоменклатура, КоличествоИзмерений - Индекс - 1);
		КонецЕсли;
	Иначе
		Если Индекс <> КоличествоИзмерений Тогда
			Предупреждение ("Группировка: ""Номенклатура"" должна быть последней в измерениях строк.");
			ПостроительОтчета.ИзмеренияСтроки.Сдвинуть(ИзмерениеНоменклатура, КоличествоИзмерений - Индекс);
		КонецЕсли;
	КонецЕсли;

	СоответствиеСтрок = Новый Соответствие;
	Для Каждого СтрокаПостроителя Из ПостроительОтчета.ИзмеренияСтроки Цикл
		Если СоответствиеСтрок[СтрокаПостроителя.ПутьКДанным] = Неопределено Тогда
			СоответствиеСтрок.Вставить(СтрокаПостроителя.ПутьКДанным, СтрокаПостроителя);
		Иначе
			Предупреждение("Повторяющаяся группировка " + СтрокаПостроителя.Представление + "." + Символы.ПС +
			"Нельзя использовать одинаковые поля группировки строк!");

			Отказ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьКорректностьНастроек()

// Процедура устанавливает доступность элемента формы "Валюта".
//
Процедура УстановитьДоступность()

	Если ВВалютеОтчета Тогда
		ЭлементыФормы.Валюта.Доступность = Истина;

		ЭлементыФормы.Валюта.АвтоОтметкаНезаполненного = Истина;
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы.Валюта.Значение) Тогда
			ЭлементыФормы.Валюта.ОтметкаНезаполненного = Истина;
		КонецЕсли;
	Иначе
		ЭлементыФормы.Валюта.Доступность = Ложь;

		ЭлементыФормы.Валюта.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.Валюта.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

	Если ФлажокЦеныНеИзменилисьС Тогда
		ЭлементыФормы.ДатаЦеныНеИзменились.Доступность = Истина;

		ЭлементыФормы.ДатаЦеныНеИзменились.АвтоОтметкаНезаполненного = Истина;
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ДатаЦеныНеИзменились.Значение) Тогда
			ЭлементыФормы.ДатаЦеныНеИзменились.ОтметкаНезаполненного = Истина;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ДатаЦеныНеИзменились.Доступность = Ложь;

		ЭлементыФормы.ДатаЦеныНеИзменились.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.ДатаЦеныНеИзменились.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьВалюты()

// Процедура обновляет построитель отчета.
// Установленные настройки при этом не изменяются.
//
Процедура ОбновитьПостроительОтчета()

	Настройки = ПостроительОтчета.ПолучитьНастройки();

	ЗаполнитьПостроительОтчетаПоЦенамНоменклатуры();

	ПостроительОтчета.УстановитьНастройки(Настройки);

КонецПроцедуры // ОбновитьПостроительОтчета()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии".
//
Процедура ПриОткрытии()

	мВопросыПриЗакрытии = Истина;

	УстановитьДоступность();

КонецПроцедуры //ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "ПередУдалением" табличного поля "ИзмеренияСтроки".
//
Процедура ИзмеренияСтрокиПередУдалением(Элемент, Отказ)

	Если Элемент.ТекущаяСтрока.Имя = "Номенклатура" Тогда
		Предупреждение ("Группировка: "+Элемент.ТекущаяСтрока.Представление+ " является обязательной.",,
		                "Нельзя удалять обязательные группировки!");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры //ИзмеренияСтрокиПередУдалением()

// Процедура - обработчик события "ПриИзменении" реквизита "ПереключательВВалютахЦен".
//
Процедура ПереключательВВалютахЦенПриИзменении(Элемент)

	УстановитьДоступность();

КонецПроцедуры //ПереключательВВалютахЦенПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ФлажокЦеныНеИзменилисьС".
//
Процедура ФлажокЦеныНеИзменилисьСПриИзменении(Элемент)

	УстановитьДоступность();

КонецПроцедуры // ФлажокЦеныНеИзменилисьСПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ИспользоватьСвойстваИКатегории".
//
Процедура ИспользоватьСвойстваИКатегорииПриИзменении(Элемент)

	ОбновитьПостроительОтчета();

КонецПроцедуры //ИспользоватьСвойстваИКатегорииПриИзменении()

// Процедура - обработчик начала выбора значения отбора
//
Процедура ОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отборы по свойствам и категориям должны быть обработаны специальным образом,
	// они определяются по представлению.
	Если Найти(НРег(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление), "категории") Тогда

		// Ограничение списка категорий.
		Назначение = ОбщийОтчет.мСоответствиеНазначений.Получить(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление);

		УправлениеОтчетами.ОсуществитьВыборКатегории(Элемент, Назначение, ЭтаФорма, СтандартнаяОбработка);
	ИначеЕсли Найти(НРег(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление), "св-во") Тогда
		Свойство = ОбщийОтчет.мСоответствиеНазначений.Получить(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление);

		УправлениеОтчетами.ОсуществитьВыборСвойства(Элемент, Свойство, ЭтаФорма, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ОтборЗначениеНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" флажка "БезПустыхЦен".
//
Процедура ФлажокБезПустыхЦенПриИзменении(Элемент)

	ОбновитьПостроительОтчета();

КонецПроцедуры //ФлажокБезПустыхЦенПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "БезОтсутствующихВКомпании".
//
Процедура ФлажокБезОтсутствующихВКомпанииПриИзменении(Элемент)

	ОбновитьПостроительОтчета();

КонецПроцедуры //ФлажокБезОтсутствующихВКомпанииПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" элемента "Поле" в измерениях строки.
//
Процедура ИзмеренияСтрокиПолеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение = "ТипЦен" Тогда
		Предупреждение("В измерениях строк нельзя выбирать тип цен!");

		ВыбранноеЗначение = "";
	КонецЕсли;

КонецПроцедуры // ИзмеренияСтрокиПолеОбработкаВыбора()

// Обработчик события "ПриСменеСтраницы" панели.
//
Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если Элемент.ТекущаяСтраница.Имя = "Печать" Тогда
		ОбновитьНастройкиПечати();
	КонецЕсли;

КонецПроцедуры // Панель1ПриСменеСтраницы()

// Обработчик события "Нажатие" кнопки "СохранитьИСформировать".
//
Процедура КоманднаяПанель1СохранитьИСформировать(Кнопка)

	Отказ = Ложь;
	ПроверитьКорректностьНастроек(Отказ);

	Если Не Отказ Тогда
		мВопросыПриЗакрытии = Ложь;
		Закрыть("Сформировать");
	КонецЕсли;

КонецПроцедуры // КоманднаяПанель1СохранитьИСформировать()


// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если мВопросыПриЗакрытии И Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПроверитьКорректностьНастроек(Отказ);

			Если Не Отказ Тогда
				мВопросыПриЗакрытии = Ложь;
				Закрыть("ОК");
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			Закрыть("Отмена");
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

// Обработчик события "НачалоВыбора" реквизита "Положение" в ТЧ Печать.
//
Процедура ТаблицаНастройкиПолейПечатьПоложениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекущаяСтрока = ЭлементыФормы.ТаблицаНастройкиПолейПечать.ТекущиеДанные;

	СписокДляВыбора = Новый СписокЗначений;

	Если мОсобыеПоля.Свойство(ТекущаяСтрока.Имя) Тогда
		СписокДляВыбора.Добавить(мОсобыеПоля[ТекущаяСтрока.Имя]);
	Иначе
		Для Каждого ЭлементСписка Из мСписокПоложенийДляПечати Цикл
			Если ЭлементСписка <> мСпециальноеПоложение Тогда
				СписокДляВыбора.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Результат = ВыбратьИзСписка(СписокДляВыбора, Элемент, СписокДляВыбора.НайтиПоЗначению(ТекущаяСтрока.Положение));

	Если Результат <> Неопределено Тогда
		ТекущаяСтрока.Положение = Результат.Значение;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ТаблицаНастройкиПолейПечатьПоложениеНачалоВыбора()

// Обработчик события "ПриИзменении" реквизита "Положение" в ТЧ Печать.
//
Процедура ТаблицаНастройкиПолейПечатьПоложениеПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ТаблицаНастройкиПолейПечать.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Положение) Тогда
		Если мОсобыеПоля.Свойство(ТекущаяСтрока.Имя) Тогда
			ТекущаяСтрока.Положение = мОсобыеПоля[ТекущаяСтрока.Имя];
		Иначе
			ТекущаяСтрока.Положение = мСписокПоложенийДляПечати[0].Значение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТаблицаНастройкиПолейПечатьПоложениеПриИзменении()

// Обработчик события "ПередУдалением" строки в ТЧ "Отбор".
//
Процедура ОтборПередУдалением(Элемент, Отказ)

	Если Элемент.ТекущаяСтрока.Имя = "Номенклатура"
	 Или Элемент.ТекущаяСтрока.Имя = "ТипЦен"
	 Или Элемент.ТекущаяСтрока.Имя = "ЦеноваяГруппа" Тогда
		Предупреждение ("Отбор: "+Элемент.ТекущаяСтрока.Имя+ " является обязательным.",,
		                "Нельзя удалять обязательные отборы!");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ОтборПередУдалением()

// Процедура - обработчик события "ОбработкаВыбора" элемента "Поле" в доп. полях.
//
Процедура ВыбранныеПоляПолеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Для Каждого Поле Из ПостроительОтчета.ВыбранныеПоля Цикл
		Если Поле.ПутьКДанным = ВыбранноеЗначение Тогда
			Предупреждение("Поле """ + Поле.Представление + """ уже выбрано!");

			ВыбранноеЗначение = "";
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ВыбранныеПоляПолеОбработкаВыбора()