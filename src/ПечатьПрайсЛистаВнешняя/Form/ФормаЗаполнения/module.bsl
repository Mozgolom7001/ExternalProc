////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСписокНоменклатуры Экспорт;
Перем мСписокТиповЦен Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура добавляет колонку в таблицу значений, если ее там нет.
// Параметры:
//  ТЗ - таблица значений, в которую нужно добавить колонку;
//  ИмяКолонки - имя колонки, которую нужно добавить.
Процедура ДобавитьКолонкуВТЗ(ТЗ, ИмяКолонки)

	Если ТЗ.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ТЗ.Колонки.Добавить(ИмяКолонки);
	КонецЕсли;

КонецПроцедуры // ДобавитьКолонкуВТЗ()

// Процедура управляет пометками кнопок командной панели формы
//
Процедура УправлениеПометкамиКнопокКоманднойПанели()

	Если ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.КоманднаяПанель.Кнопки.Отбор.Пометка                = Ложь;
		ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отбор.Пометка = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанель.Кнопки.Отбор.Пометка                = Истина;
		ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отбор.Пометка = Истина;
	КонецЕсли;

КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

// Обновляет отчет.
//
Процедура ОбновитьОтчет() Экспорт

	Отказ = Ложь;

	Если ВВалютеОтчета И НЕ ЗначениеЗаполнено(ВалютаОтчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана валюта, в которой должен формироваться прайс-лист.", Отказ);
	КонецЕсли;

	Если ФлажокЦеныНеИзменилисьС И НЕ ЗначениеЗаполнено(ДатаЦеныНеИзменились) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата, с которой нужно проверять изменение цен.", Отказ);
	КонецЕсли;

	Если ФлажокЦеныНеИзменилисьС И ДатаЦеныНеИзменились > ДатаПрайса Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата, с которой нужно проверять изменение цен, больше даты отчета.", Отказ);
	КонецЕсли;

	Если ВВалютеОтчета И ЗначениеЗаполнено(ВалютаОтчета) Тогда
		ДатаКурса  = ?(НЕ ЗначениеЗаполнено(ДатаПрайса), КонецДня(ТекущаяДата()), КонецДня(ДатаПрайса));
		КурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта",
		             ВалютаОтчета));

		Если КурсВалюты.Курс = 0 тогда
			ОбщегоНазначения.СообщитьОбОшибке("Курс валюты отчета """ + ВалютаОтчета.Наименование+""" на дату " +
			               строка(ДатаКурса)+" не определен или нулевой. Формирование отчета невозможно.", Отказ);
		КонецЕсли;

		Если КурсВалюты.Кратность = 0 тогда
			ОбщегоНазначения.СообщитьОбОшибке("Кратность курса валюты отчета """ + ВалютаОтчета.Наименование+""" на дату " +
			               строка(ДатаКурса)+" не определена или нулевая. Формирование отчета невозможно.", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда

		// Запоминаем настройку.
		Настройки = ПостроительОтчета.ПолучитьНастройки();

		ЗаполнитьПостроительОтчетаПоЦенамНоменклатуры();

		// Восстанавливаем запомненную настройку.
		ПостроительОтчета.УстановитьНастройки(Настройки);

		ПечатьПрайсЛиста(ЭлементыФормы.ДокументРезультат);

		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДокументРезультат;
	КонецЕсли;

КонецПроцедуры //ОбновитьОтчет()

// Устанавливает связь полей быстрого отбора на форме с построителем отчета
//
Процедура УстановитьСвязьПолейБыстрогоОтбораНаФормеЛокально()

	ТипОтбора = ПостроительОтчета.Отбор.Номенклатура.ТипЗначения;
	ЭлементыФормы.ФлажокНастройкиНоменклатура.Данные ="ОбработкаОбъект.ПостроительОтчета.Отбор.Номенклатура.Использование";
	ЭлементыФормы.ПолеНастройкиНоменклатура.Данные = "ОбработкаОбъект.ПостроительОтчета.Отбор.Номенклатура.Значение";
	ЭлементыФормы.ПолеВидаСравненияНоменклатура.СписокВыбора = УправлениеОтчетами.ПолучитьСписокВидовСравненияПоТипу(ТипОтбора);
	ЭлементыФормы.ПолеВидаСравненияНоменклатура.Данные = "ОбработкаОбъект.ПостроительОтчета.Отбор.Номенклатура.ВидСравнения";

	ТипОтбора = ПостроительОтчета.Отбор.ТипЦен.ТипЗначения;
	ЭлементыФормы.ФлажокНастройкиТипЦен.Данные = "ОбработкаОбъект.ПостроительОтчета.Отбор.ТипЦен.Использование";
	ЭлементыФормы.ПолеНастройкиТипЦен.Данные = "ОбработкаОбъект.ПостроительОтчета.Отбор.ТипЦен.Значение";
	ЭлементыФормы.ПолеВидаСравненияТипЦен.СписокВыбора = УправлениеОтчетами.ПолучитьСписокВидовСравненияПоТипу(ТипОтбора);
	ЭлементыФормы.ПолеВидаСравненияТипЦен.Данные = "ОбработкаОбъект.ПостроительОтчета.Отбор.ТипЦен.ВидСравнения";

	ТипОтбора = ПостроительОтчета.Отбор.ЦеноваяГруппа.ТипЗначения;
	ЭлементыФормы.ФлажокНастройкиЦеноваяГруппа.Данные = "ОбработкаОбъект.ПостроительОтчета.Отбор.ЦеноваяГруппа.Использование";
	ЭлементыФормы.ПолеНастройкиЦеноваяГруппа.Данные = "ОбработкаОбъект.ПостроительОтчета.Отбор.ЦеноваяГруппа.Значение";
	ЭлементыФормы.ПолеВидаСравненияЦеноваяГруппа.СписокВыбора = УправлениеОтчетами.ПолучитьСписокВидовСравненияПоТипу(ТипОтбора);
	ЭлементыФормы.ПолеВидаСравненияЦеноваяГруппа.Данные = "ОбработкаОбъект.ПостроительОтчета.Отбор.ЦеноваяГруппа.ВидСравнения";

КонецПроцедуры //УстановитьСвязьПолейБыстрогоОтбораНаФормеЛокально()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "Перед открытием" формы обработки.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ДатаПрайса = РабочаяДата;

	ЗаполнитьПостроительОтчетаПоЦенамНоменклатуры();
	УстановитьСвязьПолейБыстрогоОтбораНаФормеЛокально();

	// Значения по умолчанию.
	ЭлементыФормы.ФлажокНастройкиТипЦен.Значение = Истина; // Чтоб в первый раз прайс по всем типам не делали
	БезПустыхЦен = Истина;
	ОтображатьИерархиюВЦвете = Истина;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события после восстановления значений формы.
//
Процедура ПослеВосстановленияЗначений()

	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		ЗаполнитьПостроительОтчетаПоЦенамНоменклатуры();

		ПостроительОтчета.УстановитьНастройки(СохраненныеНастройки.НастройкиПостроителя);

		// Остальные реквизиты отчета восстанавливаются стандартно.
	КонецЕсли;

КонецПроцедуры // ПослеВосстановленияЗначений()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	Если мСписокНоменклатуры <> Неопределено Тогда
		Если мСписокНоменклатуры.Количество() = 1 Тогда
			Если мСписокНоменклатуры[0].Значение.ЭтоГруппа Тогда
				ПостроительОтчета.Отбор.Номенклатура.ВидСравнения = ВидСравнения.ВИерархии;
			Иначе
				ПостроительОтчета.Отбор.Номенклатура.ВидСравнения = ВидСравнения.Равно;
			КонецЕсли;
			ПостроительОтчета.Отбор.Номенклатура.Значение = мСписокНоменклатуры[0].Значение;
		Иначе
			ЕстьГруппы = Ложь;

			Для Каждого ЭлементСписка Из мСписокНоменклатуры Цикл
				Если ЭлементСписка.Значение.ЭтоГруппа Тогда
					ЕстьГруппы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если ЕстьГруппы Тогда
				ПостроительОтчета.Отбор.Номенклатура.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
			Иначе
				ПостроительОтчета.Отбор.Номенклатура.ВидСравнения = ВидСравнения.ВСписке;
			КонецЕсли;

			ПостроительОтчета.Отбор.Номенклатура.Значение = мСписокНоменклатуры;
		КонецЕсли;
		ПостроительОтчета.Отбор.Номенклатура.Использование = Истина;
	КонецЕсли;

	Если мСписокТиповЦен <> Неопределено Тогда
		Если мСписокТиповЦен.Количество() = 1 Тогда
			ЭлементыФормы.ПолеВидаСравненияТипЦен.Значение     = ВидСравнения.Равно;
			ЭлементыФормы.ПолеНастройкиТипЦен.Значение         = мСписокТиповЦен[0].Значение;
		Иначе
			ЭлементыФормы.ПолеВидаСравненияТипЦен.Значение     = ВидСравнения.ВСписке;
			ЭлементыФормы.ПолеНастройкиТипЦен.Значение         = мСписокТиповЦен;
		КонецЕсли;

		ЭлементыФормы.ФлажокНастройкиТипЦен.Значение = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;

	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "Поле");
	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "Псевдоним");
	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "ВыводитьНаПечать");
	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "Положение");
	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "Имя");
	ТаблицаНастройкиПолейПечать.Индексы.Добавить("Имя");
	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "ПутьКДанным");

	мСписокПоложенийДляПечати = Новый СписокЗначений;
	мСписокПоложенийДляПечати.Добавить("В отдельной колонке после номенклатуры");
	мСписокПоложенийДляПечати.Добавить("В отдельной колонке до номенклатуры");
	мСписокПоложенийДляПечати.Добавить("Вместе с номенклатурой");
	мСписокПоложенийДляПечати.Добавить("Специальное");

	мСпециальноеПоложение = мСписокПоложенийДляПечати[мСписокПоложенийДляПечати.Количество() - 1];

	мОсобыеПоля = Новый Структура;
	мОсобыеПоля.Вставить("Валюта", мСпециальноеПоложение.Значение);
	мОсобыеПоля.Вставить("ЕдиницаИзмерения", мСпециальноеПоложение.Значение);
	мОсобыеПоля.Вставить("Остаток", мСпециальноеПоложение.Значение);

	ОбновитьНастройкиПечати()

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события перед сохранением значений формы.
//
Процедура ПередСохранениемЗначений(Отказ)

	СохраненныеНастройки = Новый Структура;
	СохраненныеНастройки.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());

	// Остальные реквизиты отчета сохраняются стандартно.

КонецПроцедуры // ПередСохранениемЗначений()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "ПриИзменении" значения отбора "Номенклатура".
//
Процедура ПолеНастройкиНоменклатураПриИзменении(Элемент)

	УправлениеОтчетами.ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);

КонецПроцедуры // ПолеНастройкиНоменклатураПриИзменении()

// Процедура - обработчик действия кнопки "Отбор"
//
Процедура КоманднаяПанельОтбор(Кнопка)

	Если ЭлементыФормы.ПанельОтбор.Свертка <> РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();

КонецПроцедуры //КоманднаяПанельОтбор()

// Процедура - обработчик действия кнопки "Сформировать"
//
Процедура КоманднаяПанельСформировать(Кнопка)

	ОбновитьОтчет();

КонецПроцедуры //КоманднаяПанельСформировать()

// Процедура - обработчик действия кнопки "Настройка"
//
Процедура КоманднаяПанельНастройка(Кнопка)

	МетаданныеПрайса = Метаданные();

	// Запомним настройки.
	СоответствиеРеквизитов = Новый Соответствие;
	Для Каждого Реквизит Из МетаданныеПрайса.Реквизиты Цикл
		ЗначениеРеквизита = ЭтотОбъект[Реквизит.Имя];
		Если ТипЗнч(ЗначениеРеквизита) = Тип("ТаблицаЗначений") Тогда
			СоответствиеРеквизитов.Вставить(Реквизит, ЗначениеРеквизита.Скопировать());
		Иначе
			СоответствиеРеквизитов.Вставить(Реквизит, ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;

	НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки();

	ФормаНастройка = ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	Результат = ФормаНастройка.ОткрытьМодально();

	Если Результат = "ОК" Тогда
		ОбновитьНастройкиПечати();
	ИначеЕсли Результат = "Сформировать" Тогда
		ОбновитьНастройкиПечати();
		ОбновитьОтчет();
	ИначеЕсли Результат = "Отмена" Тогда//восстановим настройки
		Для Каждого Реквизит Из СоответствиеРеквизитов Цикл
			Если ТипЗнч(Реквизит.Значение) = Тип("ТаблицаЗначений") Тогда
				ЭтотОбъект[Реквизит.Ключ.Имя] = Реквизит.Значение.Скопировать();
			Иначе
				ЭтотОбъект[Реквизит.Ключ.Имя] = Реквизит.Значение;
			КонецЕсли;
		КонецЦикла;

		ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельНастройка()

// Процедура - обработчик события "ПриИзменении" значения отбора "Тип цен".
//
Процедура ПолеНастройкиТипЦенПриИзменении(Элемент)

	УправлениеОтчетами.ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);

КонецПроцедуры //ПолеНастройкиТипЦенПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения отбора "Ценовая группа".
//
Процедура ПолеНастройкиЦеноваяГруппаПриИзменении(Элемент)

	УправлениеОтчетами.ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);

КонецПроцедуры //ПолеНастройкиЦеноваяГруппаПриИзменении()
